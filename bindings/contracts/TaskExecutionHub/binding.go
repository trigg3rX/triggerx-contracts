// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contractTaskExecutionHub

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// EnforcedOptionParam is an auto generated low-level Go binding around an user-defined struct.
type EnforcedOptionParam struct {
	Eid     uint32
	MsgType uint16
	Options []byte
}

// MessagingFee is an auto generated low-level Go binding around an user-defined struct.
type MessagingFee struct {
	NativeFee  *big.Int
	LzTokenFee *big.Int
}

// Origin is an auto generated low-level Go binding around an user-defined struct.
type Origin struct {
	SrcEid uint32
	Sender [32]byte
	Nonce  uint64
}

// ContractTaskExecutionHubMetaData contains all meta data concerning the ContractTaskExecutionHub contract.
var ContractTaskExecutionHubMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_endpoint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDelegate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidEndpointCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"}],\"name\":\"InvalidOptions\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LzTokenUnavailable\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"}],\"name\":\"NoPeer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"msgValue\",\"type\":\"uint256\"}],\"name\":\"NotEnoughNative\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"OnlyEndpoint\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"}],\"name\":\"OnlyPeer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enumTaskExecutionHub.ActionType\",\"name\":\"action\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"dstEid\",\"type\":\"uint32\"}],\"name\":\"BroadcastSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"msgType\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"structEnforcedOptionParam[]\",\"name\":\"_enforcedOptions\",\"type\":\"tuple[]\"}],\"name\":\"EnforcedOptionSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"dstEid\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"FeeUsed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"FunctionExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"gas\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"value\",\"type\":\"uint128\"}],\"name\":\"GasConfigUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"}],\"name\":\"KeeperRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"}],\"name\":\"KeeperUnregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"LowBalanceAlert\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"dstEid\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"guid\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"reason\",\"type\":\"bytes\"}],\"name\":\"MessageFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"peer\",\"type\":\"bytes32\"}],\"name\":\"PeerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"dstEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"}],\"name\":\"_quoteFee\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lzTokenFee\",\"type\":\"uint256\"}],\"internalType\":\"structMessagingFee\",\"name\":\"fee\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"}],\"name\":\"addKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"_dstEids\",\"type\":\"uint32[]\"}],\"name\":\"addSpokes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"structOrigin\",\"name\":\"origin\",\"type\":\"tuple\"}],\"name\":\"allowInitializePath\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"_msgType\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_extraOptions\",\"type\":\"bytes\"}],\"name\":\"combineOptions\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultGas\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultValue\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dstEids\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endpoint\",\"outputs\":[{\"internalType\":\"contractILayerZeroEndpointV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"msgType\",\"type\":\"uint16\"}],\"name\":\"enforcedOptions\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"enforcedOption\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"jobId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tgAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"executeFunction\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ownerAddress\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_srcEid\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_originEid\",\"type\":\"uint32\"},{\"internalType\":\"address[]\",\"name\":\"_initialKeepers\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_jobRegistryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_triggerGasRegistryAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"structOrigin\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"isComposeMsgSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isKeeper\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jobRegistry\",\"outputs\":[{\"internalType\":\"contractIJobRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"structOrigin\",\"name\":\"_origin\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"_guid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"lzReceive\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"nextNonce\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oAppVersion\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"senderVersion\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"receiverVersion\",\"type\":\"uint64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"originEid\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"}],\"name\":\"peers\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"peer\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"}],\"name\":\"removeKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"}],\"name\":\"setDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"msgType\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"}],\"internalType\":\"structEnforcedOptionParam[]\",\"name\":\"_enforcedOptions\",\"type\":\"tuple[]\"}],\"name\":\"setEnforcedOptions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"gas\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"value\",\"type\":\"uint128\"}],\"name\":\"setGasConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_peer\",\"type\":\"bytes32\"}],\"name\":\"setPeer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"srcEid\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"triggerGasRegistry\",\"outputs\":[{\"internalType\":\"contractITriggerGasRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "0x6080604052600436101561001a575b3615610018575f80fd5b005b5f3560e01c806305dc09221461023957806313137d651461023457806314ae9f2e1461022f57806314bc03fb1461022a57806317442b701461022557806323682c47146102205780633400288b1461021b5780634032b72b14610216578063479cca5e146102115780634f1ef2861461020c57806352d1902d146102075780635535d461146102025780635e280f11146101fd5780636ba42aaa146101f8578063715018a6146101f357806376a9b1f8146101ee5780637d25a05e146101e957806382413eac146101e457806384e9a901146101df5780638da5cb5b146101da5780639c983124146101d5578063ad3cb1cc146101d0578063b3ce5817146101cb578063b98bd070146101c6578063bb0b6a53146101c1578063bc70b354146101bc578063ca5eb5e1146101b7578063d908b2ef146101b2578063f0b2a95d146101ad578063f2fde38b146101a8578063f3fef3a3146101a3578063fa9b1a801461019e578063fd416257146101995763ff7bd03d0361000e57611681565b61165e565b61142d565b611375565b611325565b61119d565b611175565b6110d3565b61107f565b611046565b610f6c565b610f4c565b610f05565b610d48565b610d21565b610cfb565b610c9d565b610c77565b610bd6565b610b7f565b610b3f565b610afb565b610a8d565b61090b565b6107b3565b6106a3565b610630565b6105ff565b6105c9565b6105a8565b6104f5565b610427565b610328565b610297565b634e487b7160e01b5f52603260045260245ffd5b906005548210156102925760055f52600382901c7f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0019160021b601c1690565b61023e565b346102d55760203660031901126102d5576004356005548110156102d55763ffffffff6102c5602092610252565b90549060031b1c16604051908152f35b5f80fd5b60609060031901126102d557600490565b9181601f840112156102d5578235916001600160401b0383116102d557602083818601950101116102d557565b6001600160a01b038116036102d557565b60e03660031901126102d55761033d366102d9565b6064356084356001600160401b0381116102d55761035f9036906004016102ea565b60a4929192359061036f82610317565b60c4356001600160401b0381116102d55761038e9036906004016102ea565b949093337f0000000000000000000000001a44076050125825900e736c501f859c50fe728c6001600160a01b031603610414578635966103cd886105f1565b6103d688611ad4565b9760208201358099036103ee57506100189750611b04565b63ffffffff816103fe8b936105f1565b63309afaf360e21b5f521660045260245260445ffd5b6391ac5e4f60e01b5f523360045260245ffd5b346102d55760203660031901126102d55761001860043561044781610317565b61044f611d40565b6001600160a01b0381165f818152600360205260408120805460ff191690557f3d3b6e859e3dde2c83580d0bc85d58188abff18c72fccd0e167b04d70bcbf6cf9080a2611efe565b9181601f840112156102d5578235916001600160401b0383116102d5576020808501948460051b0101116102d557565b60206003198201126102d557600435906001600160401b0382116102d5576104f191600401610497565b9091565b346102d557610503366104c7565b61050b611d40565b5f5b81811061051657005b6105218183856116d0565b359061052c826105f1565b63ffffffff600454169163ffffffff8116928303610550575b50600191500161050d565b60055490600160401b8210156105995760019361057583866105939501600555610252565b63ffffffff829392549160031b92831b921b191617905530906122b0565b5f610545565b6106c8565b5f9103126102d557565b346102d5575f3660031901126102d557604080516001815260026020820152f35b346102d5575f3660031901126102d5576007546040516001600160a01b039091168152602090f35b63ffffffff8116036102d557565b346102d55760403660031901126102d55761001860043561061f816105f1565b6024359061062b611d40565b6122b0565b346102d55760203660031901126102d55761001860043561065081610317565b610658611d40565b6001600160a01b0381165f818152600360205260408120805460ff191660011790557f1ecf9d662f201ac523808305cfcb9f1f2a8241b7fb3444333b5b4ee8f7e50b079080a2612108565b346102d5575f3660031901126102d557602063ffffffff600454821c16604051908152f35b634e487b7160e01b5f52604160045260245ffd5b606081019081106001600160401b0382111761059957604052565b604081019081106001600160401b0382111761059957604052565b90601f801991011681019081106001600160401b0382111761059957604052565b6040519061074260a083610712565b565b6001600160401b03811161059957601f01601f191660200190565b92919261076b82610744565b916107796040519384610712565b8294818452818301116102d5578281602093845f960137010152565b9080601f830112156102d5578160206107b09335910161075f565b90565b60403660031901126102d5576004356107cb81610317565b6024356001600160401b0381116102d5576107ea903690600401610795565b906001600160a01b037f000000000000000000000000005a2da42955e3837587d9cd87a19511f8041263163081149081156108e9575b506108da5761082d611d40565b6040516352d1902d60e01b8152916020836004816001600160a01b0386165afa5f93816108a9575b5061087657634c9c8ce360e01b5f526001600160a01b03821660045260245ffd5b905f516020612c6a5f395f51905f5283036108955761001892506129ba565b632a87526960e21b5f52600483905260245ffd5b6108cc91945060203d6020116108d3575b6108c48183610712565b810190612301565b925f610855565b503d6108ba565b63703e46dd60e11b5f5260045ffd5b5f516020612c6a5f395f51905f52546001600160a01b0316141590505f610820565b346102d5575f3660031901126102d5577f000000000000000000000000005a2da42955e3837587d9cd87a19511f80412636001600160a01b031630036108da5760206040515f516020612c6a5f395f51905f528152f35b6024359061ffff821682036102d557565b359061ffff821682036102d557565b90600182811c921680156109b0575b602083101461099c57565b634e487b7160e01b5f52602260045260245ffd5b91607f1691610991565b9060405191825f8254926109cd84610982565b8084529360018116908115610a3657506001146109f2575b5061074292500383610712565b90505f9291925260205f20905f915b818310610a1a575050906020610742928201015f6109e5565b6020919350806001915483858901015201910190918492610a01565b90506020925061074294915060ff191682840152151560051b8201015f6109e5565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b9060206107b0928181520190610a58565b346102d55760403660031901126102d557610af7610ae3610ade600435610ab3816105f1565b63ffffffff610ac0610962565b91165f52600260205260405f209061ffff165f5260205260405f2090565b6109ba565b604051918291602083526020830190610a58565b0390f35b346102d5575f3660031901126102d5576040517f0000000000000000000000001a44076050125825900e736c501f859c50fe728c6001600160a01b03168152602090f35b346102d55760203660031901126102d557600435610b5c81610317565b60018060a01b03165f526003602052602060ff60405f2054166040519015158152f35b346102d5575f3660031901126102d557610b97611d40565b5f80546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b346102d55760403660031901126102d5576004356001600160801b0381168091036102d5576024356001600160801b03811681036102d5577fd7a0084aec960f13956a34c7a5a0ce5e4620bca53376284f7a612f0ddcd1efd5916001600160801b03604092610c43611d40565b600680546001600160801b0319608084901b16841990911685176001600160801b03161790558351928352166020820152a1005b346102d55760403660031901126102d557610c936004356105f1565b60206040515f8152f35b346102d55760a03660031901126102d557610cb7366102d9565b506064356001600160401b0381116102d557610cd79036906004016102ea565b50506020608435610ce781610317565b6040516001600160a01b0390911630148152f35b346102d5575f3660031901126102d55760206001600160801b0360065416604051908152f35b346102d5575f3660031901126102d5575f546040516001600160a01b039091168152602090f35b346102d55760c03660031901126102d557600435610d6581610317565b60243590610d72826105f1565b604435610d7e816105f1565b6064356001600160401b0381116102d557610d9d903690600401610497565b60843591610daa83610317565b60a43593610db785610317565b5f516020612caa5f395f51905f5254966001600160401b03610de860408a901c60ff1615996001600160401b031690565b1680159081610efd575b6001149081610ef3575b159081610eea575b50610edb57610e479688610e3e60016001600160401b03195f516020612caa5f395f51905f525416175f516020612caa5f395f51905f5255565b610ea6576116f5565b610e4d57005b610e7760ff60401b195f516020612caa5f395f51905f5254165f516020612caa5f395f51905f5255565b604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290602090a1005b610ed6600160401b60ff60401b195f516020612caa5f395f51905f525416175f516020612caa5f395f51905f5255565b6116f5565b63f92ee8a960e01b5f5260045ffd5b9050155f610e04565b303b159150610dfc565b899150610df2565b346102d5575f3660031901126102d557610af7604051610f26604082610712565b60058152640352e302e360dc1b6020820152604051918291602083526020830190610a58565b346102d5575f3660031901126102d557602060065460801c604051908152f35b346102d557610f7a366104c7565b610f82611d40565b6001600160401b038111610599578060051b9160405191610fa66020850184610712565b825260208201928101903682116102d55780935b828510610fca576100188461252b565b84356001600160401b0381116102d55782016060813603126102d55760405191610ff3836106dc565b8135610ffe816105f1565b835261100c60208301610973565b60208401526040820135926001600160401b0384116102d557611036602094938594369101610795565b6040820152815201940193610fba565b346102d55760203660031901126102d55763ffffffff600435611068816105f1565b165f526001602052602060405f2054604051908152f35b346102d55760603660031901126102d55760043561109c816105f1565b6110a4610962565b604435906001600160401b0382116102d557610af7926110cb610ae39336906004016102ea565b92909161191d565b346102d5575f60203660031901126102d5576004356110f181610317565b6110f9611d40565b7f0000000000000000000000001a44076050125825900e736c501f859c50fe728c6001600160a01b031690813b156102d55760405163ca5eb5e160e01b81526001600160a01b039091166004820152905f908290602490829084905af1801561117057611164575080f35b61001891505f90610712565b6116ea565b346102d5575f3660031901126102d5576008546040516001600160a01b039091168152602090f35b346102d55760603660031901126102d5576004356111ba816105f1565b6024356001600160401b0381116102d5576111d9903690600401610795565b6044356001600160401b0381116102d5576111f8903690600401610795565b916112016119c6565b503033036112f457611268926040926112186119c6565b5061122283611ad4565b61123961122d610733565b63ffffffff9095168552565b60208401528383015260608201525f6080820152815180938192631bb8518b60e31b8352309060048401612620565b03817f0000000000000000000000001a44076050125825900e736c501f859c50fe728c6001600160a01b03165afa801561117057610af7915f916112c5575b50604051918291829190916020806040830194805184520151910152565b6112e7915060403d6040116112ed575b6112df8183610712565b810190611dbd565b5f6112a7565b503d6112d5565b60405162461bcd60e51b815260206004820152600960248201526827b7363c9039b2b63360b91b6044820152606490fd5b346102d55760203660031901126102d55760043561134281610317565b61134a611d40565b6001600160a01b038116156113625761001890612310565b631e4fbdf760e01b5f525f60045260245ffd5b346102d55760403660031901126102d55760043561139281610317565b6024359061139e611d40565b6113a661268e565b6001600160a01b031680156113f4575f80809381936113c7478311156119de565b8282156113eb575bf1156111705761001860015f516020612c8a5f395f51905f5255565b506108fc6113cf565b60405162461bcd60e51b8152602060048201526011602482015270125b9d985b1a59081c9958da5c1a595b9d607a1b6044820152606490fd5b60803660031901126102d55760243560443560043561144b82610317565b6064356001600160401b0381116102d55761146a9036906004016102ea565b91335f52600360205260ff60405f2054161561162a5761148861268e565b6007546114a5906001600160a01b03165b6001600160a01b031690565b6040805163bf8e9d5360e01b815260048101849052929083602481855afa918215611170576114e3602093611503955f916115fa575b504614611a37565b604051808095819463147f551160e01b8352600483019190602083019252565b03915afa908115611170575f916115cb575b5061152a6001600160a01b0382161515611a98565b60085461153f906001600160a01b0316611499565b94853b156102d5576040516379dd15ff60e01b81526001600160a01b039290921660048301526024820152935f908590604490829084905af19182156111705761159a94611594936115b1575b50369161075f565b906126c6565b5061001860015f516020612c8a5f395f51905f5255565b806115bf5f6115c593610712565b8061059e565b5f61158c565b6115ed915060203d6020116115f3575b6115e58183610712565b810190611a83565b5f611515565b503d6115db565b61161c915060403d604011611623575b6116148183610712565b810190611a21565b505f6114db565b503d61160a565b60405162461bcd60e51b815260206004820152600c60248201526b2737ba10309035b2b2b832b960a11b6044820152606490fd5b346102d5575f3660031901126102d557602063ffffffff60045416604051908152f35b346102d55760603660031901126102d557602061169d366102d9565b63ffffffff81356116ad816105f1565b165f52600182528160405f205491013560405191148152f35b356107b0816105f1565b91908110156102925760051b0190565b356107b081610317565b6040513d5f823e3d90fd5b9594939161173361174992611708612356565b611710612a5c565b67ffffffff000000006004549160201b169067ffffffff00000000191617600455565b63ffffffff1663ffffffff196004541617600455565b611763620f42406001600160801b03196006541617600655565b6117776001600160801b0360065416600655565b5f5b818110611838575050600780546001600160a01b039384166001600160a01b03199182161790915560088054949093169316929092179055507f0000000000000000000000001a44076050125825900e736c501f859c50fe728c6001600160a01b031690813b156102d55760405163ca5eb5e160e01b81526001600160a01b0382166004820152915f908390602490829084905af19182156111705761074292611824575b50612310565b806115bf5f61183293610712565b5f61181e565b8061187a61186d61185461184f60019587896116d0565b6116e0565b6001600160a01b03165f90815260036020526040902090565b805460ff19166001179055565b61188b61149961184f8386886116d0565b7f1ecf9d662f201ac523808305cfcb9f1f2a8241b7fb3444333b5b4ee8f7e50b075f80a201611779565b805191908290602001825e015f815290565b6118e19392610742928160405196879460208601906118b5565b918237015f815203601f198101845283610712565b90918060409360208452816020850152848401375f828201840152601f01601f1916010190565b61194b9163ffffffff610ade9296949596165f52600260205260405f209061ffff165f5260205260405f2090565b8051156119b85783156119b257600284101561198357505061197f604051928392639a6d49cd60e01b8452600484016118f6565b0390fd5b909261199861199336838661075f565b6125e8565b806002116102d55760026107b093019060011901916118c7565b92509050565b5091906107b091369161075f565b604051906119d3826106f7565b5f6020838281520152565b156119e557565b60405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b6044820152606490fd5b91908260409103126102d5576020825192015190565b15611a3e57565b60405162461bcd60e51b815260206004820152601d60248201527f4a6f622069732066726f6d206120646966666572656e7420636861696e0000006044820152606490fd5b908160209103126102d557516107b081610317565b15611a9f57565b60405162461bcd60e51b815260206004820152600d60248201526c129bd8881b9bdd08199bdd5b99609a1b6044820152606490fd5b63ffffffff16805f52600160205260405f2054908115611af2575090565b63f6ff4fb760e01b5f5260045260245ffd5b9050611b669550611b32919450611b5e929350611b1f61268e565b660aa87bee5380004710611c7d576116c6565b63ffffffff611b56611b4d60045463ffffffff9060201c1690565b63ffffffff1690565b911614611cba565b810190611cfd565b6001600160a01b031690611b7981611d22565b80611be457506001600160a01b0381165f908152600360205260409020611bce9190611ba49061186d565b807f1ecf9d662f201ac523808305cfcb9f1f2a8241b7fb3444333b5b4ee8f7e50b075f80a2612108565b61074260015f516020612c8a5f395f51905f5255565b80611bf0600192611d22565b03611c47576001600160a01b0381165f908152600360205260409020805460ff19169055611c4290807f3d3b6e859e3dde2c83580d0bc85d58188abff18c72fccd0e167b04d70bcbf6cf5f80a2611efe565b611bce565b60405162461bcd60e51b815260206004820152600e60248201526d2ab735b737bbb71030b1ba34b7b760911b6044820152606490fd5b60408051478152660aa87bee53800060208201527fb1b538a145d528cb9b8a428a3f47d5730430a03c2d98d7562357ee7db16dbd269190a16116c6565b15611cc157565b60405162461bcd60e51b815260206004820152601460248201527324b73b30b634b21039b7bab931b29031b430b4b760611b6044820152606490fd5b91908260409103126102d557813560028110156102d55791602001356107b081610317565b60021115611d2c57565b634e487b7160e01b5f52602160045260245ffd5b5f546001600160a01b03163303611d5357565b63118cdaa760e01b5f523360045260245ffd5b906002821015611d2c5752565b909291602090611d87836040810196611d66565b6001600160a01b0316910152565b91908260409103126102d557604051611dad816106f7565b6020808294805184520151910152565b906040828203126102d5576107b091611d95565b91611df49063ffffffff6107b09593168452606060208501526060840190610a58565b916040818403910152610a58565b634e487b7160e01b5f52601160045260245ffd5b90600a820291808304600a1490151715611e2c57565b611e02565b9060018201809211611e2c57565b91908201809211611e2c57565b60809060208152603460208201527f496e73756666696369656e742062616c616e636520666f722062726f61646361604082015273737420287769746820313025206275666665722960601b60608201520190565b91604091949363ffffffff91611ebb856060810198611d66565b6001600160a01b0316602085015216910152565b3d15611ef9573d90611ee082610744565b91611eee6040519384610712565b82523d5f602084013e565b606090565b60405190611f2382611f1583600160208401611d73565b03601f198101845283610712565b475f805b60055481101561210157611f4d611f3d82610252565b905463ffffffff9160031b1c1690565b90611f74600654611f6e611f67826001600160801b031690565b9160801c90565b906127ac565b6040805163f0b2a95d60e01b81529391908480611f96848c8760048501611dd1565b0381305afa5f94816120e1575b50611fe65750600192505f905f516020612c4a5f395f51905f5263ffffffff611fca611ecf565b92611fdc604051928392169482610a7c565b0390a35b01611f27565b9192876120078251612001611ffa82611e16565b6064900490565b90611e3f565b936120128588611e3f565b88106120ac5792826120517f7f8a66afaab7a89758bc21c10c08f65792a914c8459da50f53d4d6a6584d91939360019899956120a698973092866128be565b506040517f43cd42d638b31afc582e32f34f92ec252d43317313f573b84478d17a4b1706cc9080612084858e8c84611ea1565b0390a1516040805163ffffffff939093168352602083019190915290a1611e3f565b91611fe0565b50505060019291505f905f516020612c4a5f395f51905f5263ffffffff604051921691806120d981611e4c565b0390a3611fe0565b6120fa91955060403d81116112ed576112df8183610712565b935f611fa3565b5050505050565b6040519061211e82611f15835f60208401611d73565b475f805b60055481101561210157612138611f3d82610252565b90612152600654611f6e611f67826001600160801b031690565b6040805163f0b2a95d60e01b81529391908480612174848c8760048501611dd1565b0381305afa5f9481612290575b506121c45750600192505f905f516020612c4a5f395f51905f5263ffffffff6121a8611ecf565b926121ba604051928392169482610a7c565b0390a35b01612122565b9192876121d88251612001611ffa82611e16565b936121e38588611e3f565b881061225b5792826122227f7f8a66afaab7a89758bc21c10c08f65792a914c8459da50f53d4d6a6584d919393600198999561225598973092866128be565b506040517f43cd42d638b31afc582e32f34f92ec252d43317313f573b84478d17a4b1706cc9080612084858e5f84611ea1565b916121be565b50505060019291505f905f516020612c4a5f395f51905f5263ffffffff6040519216918061228881611e4c565b0390a36121be565b6122a991955060403d81116112ed576112df8183610712565b935f612181565b63ffffffff165f8181526001602090815260409182902084905581519283528201929092527f238399d427b947898edb290f5ff0f9109849b1c3ba196a42e35f00c50a54b98b91819081015b0390a1565b908160209103126102d5575190565b5f80546001600160a01b039283166001600160a01b03198216811783559216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a3565b61235e612a5c565b612366612a5c565b60015f516020612c8a5f395f51905f5255565b80518210156102925760209160051b010190565b601f821161239a57505050565b5f5260205f20906020601f840160051c830193106123d2575b601f0160051c01905b8181106123c7575050565b5f81556001016123bc565b90915081906123b3565b91909182516001600160401b03811161059957612403816123fd8454610982565b8461238d565b6020601f82116001146124425781906124339394955f92612437575b50508160011b915f199060031b1c19161790565b9055565b015190505f8061241f565b601f19821690612455845f5260205f2090565b915f5b81811061248f57509583600195969710612477575b505050811b019055565b01515f1960f88460031b161c191690555f808061246d565b9192602060018192868b015181550194019201612458565b602081016020825282518091526040820191602060408360051b8301019401925f915b8383106124d957505050505090565b909192939460208061251c600193603f19868203018752606060408b5163ffffffff815116845261ffff8682015116868501520151918160408201520190610a58565b970193019301919392906124ca565b5f5b81518110156125b65780612550604061254860019486612379565b5101516125e8565b6125b0604061255f8386612379565b51015163ffffffff6125718487612379565b5151165f5260026020526125ab60405f2061259b6020612591878a612379565b51015161ffff1690565b61ffff165f5260205260405f2090565b6123dc565b0161252d565b506122fc7fbe4864a8e820971c0247f5992e2da559595f7bf076a21cb5928d443d2a13b67491604051918291826124a7565b600361ffff600283015116036125fb5750565b604051639a6d49cd60e01b81526020600482015290819061197f906024830190610a58565b906020909392936040835263ffffffff8151166040840152818101516060840152608061267461265e604084015160a08488015260e0870190610a58565b6060840151868203603f190160a0880152610a58565b910151151560c08401526001600160a01b03909416910152565b60025f516020612c8a5f395f51905f5254146126b75760025f516020612c8a5f395f51905f5255565b633ee5aeb560e01b5f5260045ffd5b905f8082516020840134865af1916126dc611ecf565b9215612734577ff4448cdaf10358453fa19b2e0363f44780277619bd9bb676eef79d7488a7d27461271860405193604085526040850190610a58565b3460208501526001600160a01b0390921692339281900390a390565b60405162461bcd60e51b815260206004820152601060248201526f115e1958dd5d1a5bdb8819985a5b195960821b6044820152606490fd5b600360f01b8152600160f81b6002820181905260f09290921b6001600160f01b031916600382015260058101919091526107b091600691909101906118b5565b906001600160801b038116612814575060405160809190911b6001600160801b03191660208201526127eb81603081015b03601f198101835282610712565b6107b06128026127fb8351611e31565b61ffff1690565b6127dd6040519384926020840161276c565b604080516001600160801b0319608094851b81166020808401919091529390941b909316603084015290825261284a9082610712565b6127eb565b6040519061285c826106dc565b815f81525f602082015260406128706119c6565b910152565b6080818303126102d5576040519161288c836106dc565b8151835260208201516001600160401b03811681036102d55760208401526128b691604001611d95565b604082015290565b6129276080949261294396946128d261284f565b5060206128df8651612a87565b9501918251806129ab575b506128f485611ad4565b9251151592612910612904610733565b63ffffffff9097168752565b602086015260408501526060840152151585830152565b6040518095819482936302637a4560e41b845260048401612620565b03917f0000000000000000000000001a44076050125825900e736c501f859c50fe728c6001600160a01b03165af1908115611170575f91612982575090565b6107b0915060803d6080116129a4575b61299c8183610712565b810190612875565b503d612992565b6129b490612ad6565b5f6128ea565b90813b15612a3b575f516020612c6a5f395f51905f5280546001600160a01b0319166001600160a01b0384169081179091557fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b5f80a2805115612a2357612a2091612bd3565b50565b505034612a2c57565b63b398979f60e01b5f5260045ffd5b50634c9c8ce360e01b5f9081526001600160a01b0391909116600452602490fd5b60ff5f516020612caa5f395f51905f525460401c1615612a7857565b631afcd79f60e31b5f5260045ffd5b804710612a915790565b60405162461bcd60e51b815260206004820152601d60248201527f496e73756666696369656e7420636f6e74726163742062616c616e63650000006044820152606490fd5b60405163393f876560e21b81527f0000000000000000000000001a44076050125825900e736c501f859c50fe728c6001600160a01b031690602081600481855afa908115611170575f91612bb4575b506001600160a01b0316918215612ba5576020915f9160405190848201926323b872dd60e01b84523360248401526044830152606482015260648152612b6c608482610712565b519082855af1156116ea575f513d612b9c5750803b155b612b8a5750565b635274afe760e01b5f5260045260245ffd5b60011415612b83565b6329b99a9560e11b5f5260045ffd5b612bcd915060203d6020116115f3576115e58183610712565b5f612b25565b5f806107b093602081519101845af4612bea611ecf565b9190612c0f5750805115612c0057805190602001fd5b63d6bda27560e01b5f5260045ffd5b81511580612c40575b612c20575090565b639996b31560e01b5f9081526001600160a01b0391909116600452602490fd5b50803b15612c1856fe2254f63be429412a67ef70cf2ef65d61a88074bfd112333e0a449a9e4a7683c8360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00f0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00a26469706673582212205b94a021838a9ff6bdc22d37ea67fdd956a76dcb5e7df2864014a9c5a594425a64736f6c634300081b0033",
}

// ContractTaskExecutionHubABI is the input ABI used to generate the binding from.
// Deprecated: Use ContractTaskExecutionHubMetaData.ABI instead.
var ContractTaskExecutionHubABI = ContractTaskExecutionHubMetaData.ABI

// ContractTaskExecutionHubBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ContractTaskExecutionHubMetaData.Bin instead.
var ContractTaskExecutionHubBin = ContractTaskExecutionHubMetaData.Bin

// DeployContractTaskExecutionHub deploys a new Ethereum contract, binding an instance of ContractTaskExecutionHub to it.
func DeployContractTaskExecutionHub(auth *bind.TransactOpts, backend bind.ContractBackend, _endpoint common.Address, _delegate common.Address) (common.Address, *types.Transaction, *ContractTaskExecutionHub, error) {
	parsed, err := ContractTaskExecutionHubMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ContractTaskExecutionHubBin), backend, _endpoint, _delegate)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ContractTaskExecutionHub{ContractTaskExecutionHubCaller: ContractTaskExecutionHubCaller{contract: contract}, ContractTaskExecutionHubTransactor: ContractTaskExecutionHubTransactor{contract: contract}, ContractTaskExecutionHubFilterer: ContractTaskExecutionHubFilterer{contract: contract}}, nil
}

// ContractTaskExecutionHubMethods is an auto generated interface around an Ethereum contract.
type ContractTaskExecutionHubMethods interface {
	ContractTaskExecutionHubCalls
	ContractTaskExecutionHubTransacts
	ContractTaskExecutionHubFilters
}

// ContractTaskExecutionHubCalls is an auto generated interface that defines the call methods available for an Ethereum contract.
type ContractTaskExecutionHubCalls interface {
	UPGRADEINTERFACEVERSION(opts *bind.CallOpts) (string, error)

	QuoteFee(opts *bind.CallOpts, dstEid uint32, payload []byte, options []byte) (MessagingFee, error)

	AllowInitializePath(opts *bind.CallOpts, origin Origin) (bool, error)

	CombineOptions(opts *bind.CallOpts, _eid uint32, _msgType uint16, _extraOptions []byte) ([]byte, error)

	DefaultGas(opts *bind.CallOpts) (*big.Int, error)

	DefaultValue(opts *bind.CallOpts) (*big.Int, error)

	DstEids(opts *bind.CallOpts, arg0 *big.Int) (uint32, error)

	Endpoint(opts *bind.CallOpts) (common.Address, error)

	EnforcedOptions(opts *bind.CallOpts, eid uint32, msgType uint16) ([]byte, error)

	IsComposeMsgSender(opts *bind.CallOpts, arg0 Origin, arg1 []byte, _sender common.Address) (bool, error)

	IsKeeper(opts *bind.CallOpts, arg0 common.Address) (bool, error)

	JobRegistry(opts *bind.CallOpts) (common.Address, error)

	NextNonce(opts *bind.CallOpts, arg0 uint32, arg1 [32]byte) (uint64, error)

	OAppVersion(opts *bind.CallOpts) (struct {
		SenderVersion   uint64
		ReceiverVersion uint64
	}, error)

	OriginEid(opts *bind.CallOpts) (uint32, error)

	Owner(opts *bind.CallOpts) (common.Address, error)

	Peers(opts *bind.CallOpts, eid uint32) ([32]byte, error)

	ProxiableUUID(opts *bind.CallOpts) ([32]byte, error)

	SrcEid(opts *bind.CallOpts) (uint32, error)

	TriggerGasRegistry(opts *bind.CallOpts) (common.Address, error)
}

// ContractTaskExecutionHubTransacts is an auto generated interface that defines the transact methods available for an Ethereum contract.
type ContractTaskExecutionHubTransacts interface {
	AddKeeper(opts *bind.TransactOpts, keeper common.Address) (*types.Transaction, error)

	AddSpokes(opts *bind.TransactOpts, _dstEids []uint32) (*types.Transaction, error)

	ExecuteFunction(opts *bind.TransactOpts, jobId *big.Int, tgAmount *big.Int, target common.Address, data []byte) (*types.Transaction, error)

	Initialize(opts *bind.TransactOpts, _ownerAddress common.Address, _srcEid uint32, _originEid uint32, _initialKeepers []common.Address, _jobRegistryAddress common.Address, _triggerGasRegistryAddress common.Address) (*types.Transaction, error)

	LzReceive(opts *bind.TransactOpts, _origin Origin, _guid [32]byte, _message []byte, _executor common.Address, _extraData []byte) (*types.Transaction, error)

	RemoveKeeper(opts *bind.TransactOpts, keeper common.Address) (*types.Transaction, error)

	RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error)

	SetDelegate(opts *bind.TransactOpts, _delegate common.Address) (*types.Transaction, error)

	SetEnforcedOptions(opts *bind.TransactOpts, _enforcedOptions []EnforcedOptionParam) (*types.Transaction, error)

	SetGasConfig(opts *bind.TransactOpts, gas *big.Int, value *big.Int) (*types.Transaction, error)

	SetPeer(opts *bind.TransactOpts, _eid uint32, _peer [32]byte) (*types.Transaction, error)

	TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error)

	UpgradeToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error)

	Withdraw(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error)
}

// ContractTaskExecutionHubFilterer is an auto generated interface that defines the log filtering methods available for an Ethereum contract.
type ContractTaskExecutionHubFilters interface {
	FilterBroadcastSent(opts *bind.FilterOpts) (*ContractTaskExecutionHubBroadcastSentIterator, error)
	WatchBroadcastSent(opts *bind.WatchOpts, sink chan<- *ContractTaskExecutionHubBroadcastSent) (event.Subscription, error)
	ParseBroadcastSent(log types.Log) (*ContractTaskExecutionHubBroadcastSent, error)

	FilterEnforcedOptionSet(opts *bind.FilterOpts) (*ContractTaskExecutionHubEnforcedOptionSetIterator, error)
	WatchEnforcedOptionSet(opts *bind.WatchOpts, sink chan<- *ContractTaskExecutionHubEnforcedOptionSet) (event.Subscription, error)
	ParseEnforcedOptionSet(log types.Log) (*ContractTaskExecutionHubEnforcedOptionSet, error)

	FilterFeeUsed(opts *bind.FilterOpts) (*ContractTaskExecutionHubFeeUsedIterator, error)
	WatchFeeUsed(opts *bind.WatchOpts, sink chan<- *ContractTaskExecutionHubFeeUsed) (event.Subscription, error)
	ParseFeeUsed(log types.Log) (*ContractTaskExecutionHubFeeUsed, error)

	FilterFunctionExecuted(opts *bind.FilterOpts, keeper []common.Address, target []common.Address) (*ContractTaskExecutionHubFunctionExecutedIterator, error)
	WatchFunctionExecuted(opts *bind.WatchOpts, sink chan<- *ContractTaskExecutionHubFunctionExecuted, keeper []common.Address, target []common.Address) (event.Subscription, error)
	ParseFunctionExecuted(log types.Log) (*ContractTaskExecutionHubFunctionExecuted, error)

	FilterGasConfigUpdated(opts *bind.FilterOpts) (*ContractTaskExecutionHubGasConfigUpdatedIterator, error)
	WatchGasConfigUpdated(opts *bind.WatchOpts, sink chan<- *ContractTaskExecutionHubGasConfigUpdated) (event.Subscription, error)
	ParseGasConfigUpdated(log types.Log) (*ContractTaskExecutionHubGasConfigUpdated, error)

	FilterInitialized(opts *bind.FilterOpts) (*ContractTaskExecutionHubInitializedIterator, error)
	WatchInitialized(opts *bind.WatchOpts, sink chan<- *ContractTaskExecutionHubInitialized) (event.Subscription, error)
	ParseInitialized(log types.Log) (*ContractTaskExecutionHubInitialized, error)

	FilterKeeperRegistered(opts *bind.FilterOpts, keeper []common.Address) (*ContractTaskExecutionHubKeeperRegisteredIterator, error)
	WatchKeeperRegistered(opts *bind.WatchOpts, sink chan<- *ContractTaskExecutionHubKeeperRegistered, keeper []common.Address) (event.Subscription, error)
	ParseKeeperRegistered(log types.Log) (*ContractTaskExecutionHubKeeperRegistered, error)

	FilterKeeperUnregistered(opts *bind.FilterOpts, keeper []common.Address) (*ContractTaskExecutionHubKeeperUnregisteredIterator, error)
	WatchKeeperUnregistered(opts *bind.WatchOpts, sink chan<- *ContractTaskExecutionHubKeeperUnregistered, keeper []common.Address) (event.Subscription, error)
	ParseKeeperUnregistered(log types.Log) (*ContractTaskExecutionHubKeeperUnregistered, error)

	FilterLowBalanceAlert(opts *bind.FilterOpts) (*ContractTaskExecutionHubLowBalanceAlertIterator, error)
	WatchLowBalanceAlert(opts *bind.WatchOpts, sink chan<- *ContractTaskExecutionHubLowBalanceAlert) (event.Subscription, error)
	ParseLowBalanceAlert(log types.Log) (*ContractTaskExecutionHubLowBalanceAlert, error)

	FilterMessageFailed(opts *bind.FilterOpts, dstEid []uint32, guid [][32]byte) (*ContractTaskExecutionHubMessageFailedIterator, error)
	WatchMessageFailed(opts *bind.WatchOpts, sink chan<- *ContractTaskExecutionHubMessageFailed, dstEid []uint32, guid [][32]byte) (event.Subscription, error)
	ParseMessageFailed(log types.Log) (*ContractTaskExecutionHubMessageFailed, error)

	FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ContractTaskExecutionHubOwnershipTransferredIterator, error)
	WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ContractTaskExecutionHubOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error)
	ParseOwnershipTransferred(log types.Log) (*ContractTaskExecutionHubOwnershipTransferred, error)

	FilterPeerSet(opts *bind.FilterOpts) (*ContractTaskExecutionHubPeerSetIterator, error)
	WatchPeerSet(opts *bind.WatchOpts, sink chan<- *ContractTaskExecutionHubPeerSet) (event.Subscription, error)
	ParsePeerSet(log types.Log) (*ContractTaskExecutionHubPeerSet, error)

	FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*ContractTaskExecutionHubUpgradedIterator, error)
	WatchUpgraded(opts *bind.WatchOpts, sink chan<- *ContractTaskExecutionHubUpgraded, implementation []common.Address) (event.Subscription, error)
	ParseUpgraded(log types.Log) (*ContractTaskExecutionHubUpgraded, error)
}

// ContractTaskExecutionHub is an auto generated Go binding around an Ethereum contract.
type ContractTaskExecutionHub struct {
	ContractTaskExecutionHubCaller     // Read-only binding to the contract
	ContractTaskExecutionHubTransactor // Write-only binding to the contract
	ContractTaskExecutionHubFilterer   // Log filterer for contract events
}

// ContractTaskExecutionHub implements the ContractTaskExecutionHubMethods interface.
var _ ContractTaskExecutionHubMethods = (*ContractTaskExecutionHub)(nil)

// ContractTaskExecutionHubCaller is an auto generated read-only Go binding around an Ethereum contract.
type ContractTaskExecutionHubCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractTaskExecutionHubCaller implements the ContractTaskExecutionHubCalls interface.
var _ ContractTaskExecutionHubCalls = (*ContractTaskExecutionHubCaller)(nil)

// ContractTaskExecutionHubTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ContractTaskExecutionHubTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractTaskExecutionHubTransactor implements the ContractTaskExecutionHubTransacts interface.
var _ ContractTaskExecutionHubTransacts = (*ContractTaskExecutionHubTransactor)(nil)

// ContractTaskExecutionHubFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ContractTaskExecutionHubFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractTaskExecutionHubFilterer implements the ContractTaskExecutionHubFilters interface.
var _ ContractTaskExecutionHubFilters = (*ContractTaskExecutionHubFilterer)(nil)

// ContractTaskExecutionHubSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ContractTaskExecutionHubSession struct {
	Contract     *ContractTaskExecutionHub // Generic contract binding to set the session for
	CallOpts     bind.CallOpts             // Call options to use throughout this session
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// ContractTaskExecutionHubCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ContractTaskExecutionHubCallerSession struct {
	Contract *ContractTaskExecutionHubCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                   // Call options to use throughout this session
}

// ContractTaskExecutionHubTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ContractTaskExecutionHubTransactorSession struct {
	Contract     *ContractTaskExecutionHubTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                   // Transaction auth options to use throughout this session
}

// ContractTaskExecutionHubRaw is an auto generated low-level Go binding around an Ethereum contract.
type ContractTaskExecutionHubRaw struct {
	Contract *ContractTaskExecutionHub // Generic contract binding to access the raw methods on
}

// ContractTaskExecutionHubCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ContractTaskExecutionHubCallerRaw struct {
	Contract *ContractTaskExecutionHubCaller // Generic read-only contract binding to access the raw methods on
}

// ContractTaskExecutionHubTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ContractTaskExecutionHubTransactorRaw struct {
	Contract *ContractTaskExecutionHubTransactor // Generic write-only contract binding to access the raw methods on
}

// NewContractTaskExecutionHub creates a new instance of ContractTaskExecutionHub, bound to a specific deployed contract.
func NewContractTaskExecutionHub(address common.Address, backend bind.ContractBackend) (*ContractTaskExecutionHub, error) {
	contract, err := bindContractTaskExecutionHub(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ContractTaskExecutionHub{ContractTaskExecutionHubCaller: ContractTaskExecutionHubCaller{contract: contract}, ContractTaskExecutionHubTransactor: ContractTaskExecutionHubTransactor{contract: contract}, ContractTaskExecutionHubFilterer: ContractTaskExecutionHubFilterer{contract: contract}}, nil
}

// NewContractTaskExecutionHubCaller creates a new read-only instance of ContractTaskExecutionHub, bound to a specific deployed contract.
func NewContractTaskExecutionHubCaller(address common.Address, caller bind.ContractCaller) (*ContractTaskExecutionHubCaller, error) {
	contract, err := bindContractTaskExecutionHub(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ContractTaskExecutionHubCaller{contract: contract}, nil
}

// NewContractTaskExecutionHubTransactor creates a new write-only instance of ContractTaskExecutionHub, bound to a specific deployed contract.
func NewContractTaskExecutionHubTransactor(address common.Address, transactor bind.ContractTransactor) (*ContractTaskExecutionHubTransactor, error) {
	contract, err := bindContractTaskExecutionHub(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ContractTaskExecutionHubTransactor{contract: contract}, nil
}

// NewContractTaskExecutionHubFilterer creates a new log filterer instance of ContractTaskExecutionHub, bound to a specific deployed contract.
func NewContractTaskExecutionHubFilterer(address common.Address, filterer bind.ContractFilterer) (*ContractTaskExecutionHubFilterer, error) {
	contract, err := bindContractTaskExecutionHub(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ContractTaskExecutionHubFilterer{contract: contract}, nil
}

// bindContractTaskExecutionHub binds a generic wrapper to an already deployed contract.
func bindContractTaskExecutionHub(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ContractTaskExecutionHubMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ContractTaskExecutionHub *ContractTaskExecutionHubRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ContractTaskExecutionHub.Contract.ContractTaskExecutionHubCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ContractTaskExecutionHub *ContractTaskExecutionHubRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractTaskExecutionHub.Contract.ContractTaskExecutionHubTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ContractTaskExecutionHub *ContractTaskExecutionHubRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ContractTaskExecutionHub.Contract.ContractTaskExecutionHubTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ContractTaskExecutionHub *ContractTaskExecutionHubCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ContractTaskExecutionHub.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ContractTaskExecutionHub *ContractTaskExecutionHubTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractTaskExecutionHub.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ContractTaskExecutionHub *ContractTaskExecutionHubTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ContractTaskExecutionHub.Contract.contract.Transact(opts, method, params...)
}

// UPGRADEINTERFACEVERSION is a free data retrieval call binding the contract method 0xad3cb1cc.
//
// Solidity: function UPGRADE_INTERFACE_VERSION() view returns(string)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubCaller) UPGRADEINTERFACEVERSION(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ContractTaskExecutionHub.contract.Call(opts, &out, "UPGRADE_INTERFACE_VERSION")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// UPGRADEINTERFACEVERSION is a free data retrieval call binding the contract method 0xad3cb1cc.
//
// Solidity: function UPGRADE_INTERFACE_VERSION() view returns(string)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubSession) UPGRADEINTERFACEVERSION() (string, error) {
	return _ContractTaskExecutionHub.Contract.UPGRADEINTERFACEVERSION(&_ContractTaskExecutionHub.CallOpts)
}

// UPGRADEINTERFACEVERSION is a free data retrieval call binding the contract method 0xad3cb1cc.
//
// Solidity: function UPGRADE_INTERFACE_VERSION() view returns(string)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubCallerSession) UPGRADEINTERFACEVERSION() (string, error) {
	return _ContractTaskExecutionHub.Contract.UPGRADEINTERFACEVERSION(&_ContractTaskExecutionHub.CallOpts)
}

// QuoteFee is a free data retrieval call binding the contract method 0xf0b2a95d.
//
// Solidity: function _quoteFee(uint32 dstEid, bytes payload, bytes options) view returns((uint256,uint256) fee)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubCaller) QuoteFee(opts *bind.CallOpts, dstEid uint32, payload []byte, options []byte) (MessagingFee, error) {
	var out []interface{}
	err := _ContractTaskExecutionHub.contract.Call(opts, &out, "_quoteFee", dstEid, payload, options)

	if err != nil {
		return *new(MessagingFee), err
	}

	out0 := *abi.ConvertType(out[0], new(MessagingFee)).(*MessagingFee)

	return out0, err

}

// QuoteFee is a free data retrieval call binding the contract method 0xf0b2a95d.
//
// Solidity: function _quoteFee(uint32 dstEid, bytes payload, bytes options) view returns((uint256,uint256) fee)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubSession) QuoteFee(dstEid uint32, payload []byte, options []byte) (MessagingFee, error) {
	return _ContractTaskExecutionHub.Contract.QuoteFee(&_ContractTaskExecutionHub.CallOpts, dstEid, payload, options)
}

// QuoteFee is a free data retrieval call binding the contract method 0xf0b2a95d.
//
// Solidity: function _quoteFee(uint32 dstEid, bytes payload, bytes options) view returns((uint256,uint256) fee)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubCallerSession) QuoteFee(dstEid uint32, payload []byte, options []byte) (MessagingFee, error) {
	return _ContractTaskExecutionHub.Contract.QuoteFee(&_ContractTaskExecutionHub.CallOpts, dstEid, payload, options)
}

// AllowInitializePath is a free data retrieval call binding the contract method 0xff7bd03d.
//
// Solidity: function allowInitializePath((uint32,bytes32,uint64) origin) view returns(bool)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubCaller) AllowInitializePath(opts *bind.CallOpts, origin Origin) (bool, error) {
	var out []interface{}
	err := _ContractTaskExecutionHub.contract.Call(opts, &out, "allowInitializePath", origin)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// AllowInitializePath is a free data retrieval call binding the contract method 0xff7bd03d.
//
// Solidity: function allowInitializePath((uint32,bytes32,uint64) origin) view returns(bool)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubSession) AllowInitializePath(origin Origin) (bool, error) {
	return _ContractTaskExecutionHub.Contract.AllowInitializePath(&_ContractTaskExecutionHub.CallOpts, origin)
}

// AllowInitializePath is a free data retrieval call binding the contract method 0xff7bd03d.
//
// Solidity: function allowInitializePath((uint32,bytes32,uint64) origin) view returns(bool)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubCallerSession) AllowInitializePath(origin Origin) (bool, error) {
	return _ContractTaskExecutionHub.Contract.AllowInitializePath(&_ContractTaskExecutionHub.CallOpts, origin)
}

// CombineOptions is a free data retrieval call binding the contract method 0xbc70b354.
//
// Solidity: function combineOptions(uint32 _eid, uint16 _msgType, bytes _extraOptions) view returns(bytes)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubCaller) CombineOptions(opts *bind.CallOpts, _eid uint32, _msgType uint16, _extraOptions []byte) ([]byte, error) {
	var out []interface{}
	err := _ContractTaskExecutionHub.contract.Call(opts, &out, "combineOptions", _eid, _msgType, _extraOptions)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// CombineOptions is a free data retrieval call binding the contract method 0xbc70b354.
//
// Solidity: function combineOptions(uint32 _eid, uint16 _msgType, bytes _extraOptions) view returns(bytes)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubSession) CombineOptions(_eid uint32, _msgType uint16, _extraOptions []byte) ([]byte, error) {
	return _ContractTaskExecutionHub.Contract.CombineOptions(&_ContractTaskExecutionHub.CallOpts, _eid, _msgType, _extraOptions)
}

// CombineOptions is a free data retrieval call binding the contract method 0xbc70b354.
//
// Solidity: function combineOptions(uint32 _eid, uint16 _msgType, bytes _extraOptions) view returns(bytes)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubCallerSession) CombineOptions(_eid uint32, _msgType uint16, _extraOptions []byte) ([]byte, error) {
	return _ContractTaskExecutionHub.Contract.CombineOptions(&_ContractTaskExecutionHub.CallOpts, _eid, _msgType, _extraOptions)
}

// DefaultGas is a free data retrieval call binding the contract method 0x84e9a901.
//
// Solidity: function defaultGas() view returns(uint128)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubCaller) DefaultGas(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ContractTaskExecutionHub.contract.Call(opts, &out, "defaultGas")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DefaultGas is a free data retrieval call binding the contract method 0x84e9a901.
//
// Solidity: function defaultGas() view returns(uint128)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubSession) DefaultGas() (*big.Int, error) {
	return _ContractTaskExecutionHub.Contract.DefaultGas(&_ContractTaskExecutionHub.CallOpts)
}

// DefaultGas is a free data retrieval call binding the contract method 0x84e9a901.
//
// Solidity: function defaultGas() view returns(uint128)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubCallerSession) DefaultGas() (*big.Int, error) {
	return _ContractTaskExecutionHub.Contract.DefaultGas(&_ContractTaskExecutionHub.CallOpts)
}

// DefaultValue is a free data retrieval call binding the contract method 0xb3ce5817.
//
// Solidity: function defaultValue() view returns(uint128)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubCaller) DefaultValue(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ContractTaskExecutionHub.contract.Call(opts, &out, "defaultValue")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DefaultValue is a free data retrieval call binding the contract method 0xb3ce5817.
//
// Solidity: function defaultValue() view returns(uint128)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubSession) DefaultValue() (*big.Int, error) {
	return _ContractTaskExecutionHub.Contract.DefaultValue(&_ContractTaskExecutionHub.CallOpts)
}

// DefaultValue is a free data retrieval call binding the contract method 0xb3ce5817.
//
// Solidity: function defaultValue() view returns(uint128)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubCallerSession) DefaultValue() (*big.Int, error) {
	return _ContractTaskExecutionHub.Contract.DefaultValue(&_ContractTaskExecutionHub.CallOpts)
}

// DstEids is a free data retrieval call binding the contract method 0x05dc0922.
//
// Solidity: function dstEids(uint256 ) view returns(uint32)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubCaller) DstEids(opts *bind.CallOpts, arg0 *big.Int) (uint32, error) {
	var out []interface{}
	err := _ContractTaskExecutionHub.contract.Call(opts, &out, "dstEids", arg0)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// DstEids is a free data retrieval call binding the contract method 0x05dc0922.
//
// Solidity: function dstEids(uint256 ) view returns(uint32)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubSession) DstEids(arg0 *big.Int) (uint32, error) {
	return _ContractTaskExecutionHub.Contract.DstEids(&_ContractTaskExecutionHub.CallOpts, arg0)
}

// DstEids is a free data retrieval call binding the contract method 0x05dc0922.
//
// Solidity: function dstEids(uint256 ) view returns(uint32)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubCallerSession) DstEids(arg0 *big.Int) (uint32, error) {
	return _ContractTaskExecutionHub.Contract.DstEids(&_ContractTaskExecutionHub.CallOpts, arg0)
}

// Endpoint is a free data retrieval call binding the contract method 0x5e280f11.
//
// Solidity: function endpoint() view returns(address)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubCaller) Endpoint(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractTaskExecutionHub.contract.Call(opts, &out, "endpoint")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Endpoint is a free data retrieval call binding the contract method 0x5e280f11.
//
// Solidity: function endpoint() view returns(address)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubSession) Endpoint() (common.Address, error) {
	return _ContractTaskExecutionHub.Contract.Endpoint(&_ContractTaskExecutionHub.CallOpts)
}

// Endpoint is a free data retrieval call binding the contract method 0x5e280f11.
//
// Solidity: function endpoint() view returns(address)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubCallerSession) Endpoint() (common.Address, error) {
	return _ContractTaskExecutionHub.Contract.Endpoint(&_ContractTaskExecutionHub.CallOpts)
}

// EnforcedOptions is a free data retrieval call binding the contract method 0x5535d461.
//
// Solidity: function enforcedOptions(uint32 eid, uint16 msgType) view returns(bytes enforcedOption)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubCaller) EnforcedOptions(opts *bind.CallOpts, eid uint32, msgType uint16) ([]byte, error) {
	var out []interface{}
	err := _ContractTaskExecutionHub.contract.Call(opts, &out, "enforcedOptions", eid, msgType)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// EnforcedOptions is a free data retrieval call binding the contract method 0x5535d461.
//
// Solidity: function enforcedOptions(uint32 eid, uint16 msgType) view returns(bytes enforcedOption)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubSession) EnforcedOptions(eid uint32, msgType uint16) ([]byte, error) {
	return _ContractTaskExecutionHub.Contract.EnforcedOptions(&_ContractTaskExecutionHub.CallOpts, eid, msgType)
}

// EnforcedOptions is a free data retrieval call binding the contract method 0x5535d461.
//
// Solidity: function enforcedOptions(uint32 eid, uint16 msgType) view returns(bytes enforcedOption)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubCallerSession) EnforcedOptions(eid uint32, msgType uint16) ([]byte, error) {
	return _ContractTaskExecutionHub.Contract.EnforcedOptions(&_ContractTaskExecutionHub.CallOpts, eid, msgType)
}

// IsComposeMsgSender is a free data retrieval call binding the contract method 0x82413eac.
//
// Solidity: function isComposeMsgSender((uint32,bytes32,uint64) , bytes , address _sender) view returns(bool)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubCaller) IsComposeMsgSender(opts *bind.CallOpts, arg0 Origin, arg1 []byte, _sender common.Address) (bool, error) {
	var out []interface{}
	err := _ContractTaskExecutionHub.contract.Call(opts, &out, "isComposeMsgSender", arg0, arg1, _sender)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsComposeMsgSender is a free data retrieval call binding the contract method 0x82413eac.
//
// Solidity: function isComposeMsgSender((uint32,bytes32,uint64) , bytes , address _sender) view returns(bool)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubSession) IsComposeMsgSender(arg0 Origin, arg1 []byte, _sender common.Address) (bool, error) {
	return _ContractTaskExecutionHub.Contract.IsComposeMsgSender(&_ContractTaskExecutionHub.CallOpts, arg0, arg1, _sender)
}

// IsComposeMsgSender is a free data retrieval call binding the contract method 0x82413eac.
//
// Solidity: function isComposeMsgSender((uint32,bytes32,uint64) , bytes , address _sender) view returns(bool)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubCallerSession) IsComposeMsgSender(arg0 Origin, arg1 []byte, _sender common.Address) (bool, error) {
	return _ContractTaskExecutionHub.Contract.IsComposeMsgSender(&_ContractTaskExecutionHub.CallOpts, arg0, arg1, _sender)
}

// IsKeeper is a free data retrieval call binding the contract method 0x6ba42aaa.
//
// Solidity: function isKeeper(address ) view returns(bool)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubCaller) IsKeeper(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _ContractTaskExecutionHub.contract.Call(opts, &out, "isKeeper", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsKeeper is a free data retrieval call binding the contract method 0x6ba42aaa.
//
// Solidity: function isKeeper(address ) view returns(bool)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubSession) IsKeeper(arg0 common.Address) (bool, error) {
	return _ContractTaskExecutionHub.Contract.IsKeeper(&_ContractTaskExecutionHub.CallOpts, arg0)
}

// IsKeeper is a free data retrieval call binding the contract method 0x6ba42aaa.
//
// Solidity: function isKeeper(address ) view returns(bool)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubCallerSession) IsKeeper(arg0 common.Address) (bool, error) {
	return _ContractTaskExecutionHub.Contract.IsKeeper(&_ContractTaskExecutionHub.CallOpts, arg0)
}

// JobRegistry is a free data retrieval call binding the contract method 0x23682c47.
//
// Solidity: function jobRegistry() view returns(address)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubCaller) JobRegistry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractTaskExecutionHub.contract.Call(opts, &out, "jobRegistry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// JobRegistry is a free data retrieval call binding the contract method 0x23682c47.
//
// Solidity: function jobRegistry() view returns(address)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubSession) JobRegistry() (common.Address, error) {
	return _ContractTaskExecutionHub.Contract.JobRegistry(&_ContractTaskExecutionHub.CallOpts)
}

// JobRegistry is a free data retrieval call binding the contract method 0x23682c47.
//
// Solidity: function jobRegistry() view returns(address)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubCallerSession) JobRegistry() (common.Address, error) {
	return _ContractTaskExecutionHub.Contract.JobRegistry(&_ContractTaskExecutionHub.CallOpts)
}

// NextNonce is a free data retrieval call binding the contract method 0x7d25a05e.
//
// Solidity: function nextNonce(uint32 , bytes32 ) view returns(uint64 nonce)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubCaller) NextNonce(opts *bind.CallOpts, arg0 uint32, arg1 [32]byte) (uint64, error) {
	var out []interface{}
	err := _ContractTaskExecutionHub.contract.Call(opts, &out, "nextNonce", arg0, arg1)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// NextNonce is a free data retrieval call binding the contract method 0x7d25a05e.
//
// Solidity: function nextNonce(uint32 , bytes32 ) view returns(uint64 nonce)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubSession) NextNonce(arg0 uint32, arg1 [32]byte) (uint64, error) {
	return _ContractTaskExecutionHub.Contract.NextNonce(&_ContractTaskExecutionHub.CallOpts, arg0, arg1)
}

// NextNonce is a free data retrieval call binding the contract method 0x7d25a05e.
//
// Solidity: function nextNonce(uint32 , bytes32 ) view returns(uint64 nonce)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubCallerSession) NextNonce(arg0 uint32, arg1 [32]byte) (uint64, error) {
	return _ContractTaskExecutionHub.Contract.NextNonce(&_ContractTaskExecutionHub.CallOpts, arg0, arg1)
}

// OAppVersion is a free data retrieval call binding the contract method 0x17442b70.
//
// Solidity: function oAppVersion() pure returns(uint64 senderVersion, uint64 receiverVersion)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubCaller) OAppVersion(opts *bind.CallOpts) (struct {
	SenderVersion   uint64
	ReceiverVersion uint64
}, error) {
	var out []interface{}
	err := _ContractTaskExecutionHub.contract.Call(opts, &out, "oAppVersion")

	outstruct := new(struct {
		SenderVersion   uint64
		ReceiverVersion uint64
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.SenderVersion = *abi.ConvertType(out[0], new(uint64)).(*uint64)
	outstruct.ReceiverVersion = *abi.ConvertType(out[1], new(uint64)).(*uint64)

	return *outstruct, err

}

// OAppVersion is a free data retrieval call binding the contract method 0x17442b70.
//
// Solidity: function oAppVersion() pure returns(uint64 senderVersion, uint64 receiverVersion)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubSession) OAppVersion() (struct {
	SenderVersion   uint64
	ReceiverVersion uint64
}, error) {
	return _ContractTaskExecutionHub.Contract.OAppVersion(&_ContractTaskExecutionHub.CallOpts)
}

// OAppVersion is a free data retrieval call binding the contract method 0x17442b70.
//
// Solidity: function oAppVersion() pure returns(uint64 senderVersion, uint64 receiverVersion)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubCallerSession) OAppVersion() (struct {
	SenderVersion   uint64
	ReceiverVersion uint64
}, error) {
	return _ContractTaskExecutionHub.Contract.OAppVersion(&_ContractTaskExecutionHub.CallOpts)
}

// OriginEid is a free data retrieval call binding the contract method 0xfd416257.
//
// Solidity: function originEid() view returns(uint32)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubCaller) OriginEid(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _ContractTaskExecutionHub.contract.Call(opts, &out, "originEid")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// OriginEid is a free data retrieval call binding the contract method 0xfd416257.
//
// Solidity: function originEid() view returns(uint32)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubSession) OriginEid() (uint32, error) {
	return _ContractTaskExecutionHub.Contract.OriginEid(&_ContractTaskExecutionHub.CallOpts)
}

// OriginEid is a free data retrieval call binding the contract method 0xfd416257.
//
// Solidity: function originEid() view returns(uint32)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubCallerSession) OriginEid() (uint32, error) {
	return _ContractTaskExecutionHub.Contract.OriginEid(&_ContractTaskExecutionHub.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractTaskExecutionHub.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubSession) Owner() (common.Address, error) {
	return _ContractTaskExecutionHub.Contract.Owner(&_ContractTaskExecutionHub.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubCallerSession) Owner() (common.Address, error) {
	return _ContractTaskExecutionHub.Contract.Owner(&_ContractTaskExecutionHub.CallOpts)
}

// Peers is a free data retrieval call binding the contract method 0xbb0b6a53.
//
// Solidity: function peers(uint32 eid) view returns(bytes32 peer)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubCaller) Peers(opts *bind.CallOpts, eid uint32) ([32]byte, error) {
	var out []interface{}
	err := _ContractTaskExecutionHub.contract.Call(opts, &out, "peers", eid)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// Peers is a free data retrieval call binding the contract method 0xbb0b6a53.
//
// Solidity: function peers(uint32 eid) view returns(bytes32 peer)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubSession) Peers(eid uint32) ([32]byte, error) {
	return _ContractTaskExecutionHub.Contract.Peers(&_ContractTaskExecutionHub.CallOpts, eid)
}

// Peers is a free data retrieval call binding the contract method 0xbb0b6a53.
//
// Solidity: function peers(uint32 eid) view returns(bytes32 peer)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubCallerSession) Peers(eid uint32) ([32]byte, error) {
	return _ContractTaskExecutionHub.Contract.Peers(&_ContractTaskExecutionHub.CallOpts, eid)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubCaller) ProxiableUUID(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _ContractTaskExecutionHub.contract.Call(opts, &out, "proxiableUUID")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubSession) ProxiableUUID() ([32]byte, error) {
	return _ContractTaskExecutionHub.Contract.ProxiableUUID(&_ContractTaskExecutionHub.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubCallerSession) ProxiableUUID() ([32]byte, error) {
	return _ContractTaskExecutionHub.Contract.ProxiableUUID(&_ContractTaskExecutionHub.CallOpts)
}

// SrcEid is a free data retrieval call binding the contract method 0x479cca5e.
//
// Solidity: function srcEid() view returns(uint32)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubCaller) SrcEid(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _ContractTaskExecutionHub.contract.Call(opts, &out, "srcEid")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// SrcEid is a free data retrieval call binding the contract method 0x479cca5e.
//
// Solidity: function srcEid() view returns(uint32)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubSession) SrcEid() (uint32, error) {
	return _ContractTaskExecutionHub.Contract.SrcEid(&_ContractTaskExecutionHub.CallOpts)
}

// SrcEid is a free data retrieval call binding the contract method 0x479cca5e.
//
// Solidity: function srcEid() view returns(uint32)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubCallerSession) SrcEid() (uint32, error) {
	return _ContractTaskExecutionHub.Contract.SrcEid(&_ContractTaskExecutionHub.CallOpts)
}

// TriggerGasRegistry is a free data retrieval call binding the contract method 0xd908b2ef.
//
// Solidity: function triggerGasRegistry() view returns(address)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubCaller) TriggerGasRegistry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractTaskExecutionHub.contract.Call(opts, &out, "triggerGasRegistry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// TriggerGasRegistry is a free data retrieval call binding the contract method 0xd908b2ef.
//
// Solidity: function triggerGasRegistry() view returns(address)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubSession) TriggerGasRegistry() (common.Address, error) {
	return _ContractTaskExecutionHub.Contract.TriggerGasRegistry(&_ContractTaskExecutionHub.CallOpts)
}

// TriggerGasRegistry is a free data retrieval call binding the contract method 0xd908b2ef.
//
// Solidity: function triggerGasRegistry() view returns(address)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubCallerSession) TriggerGasRegistry() (common.Address, error) {
	return _ContractTaskExecutionHub.Contract.TriggerGasRegistry(&_ContractTaskExecutionHub.CallOpts)
}

// AddKeeper is a paid mutator transaction binding the contract method 0x4032b72b.
//
// Solidity: function addKeeper(address keeper) returns()
func (_ContractTaskExecutionHub *ContractTaskExecutionHubTransactor) AddKeeper(opts *bind.TransactOpts, keeper common.Address) (*types.Transaction, error) {
	return _ContractTaskExecutionHub.contract.Transact(opts, "addKeeper", keeper)
}

// AddKeeper is a paid mutator transaction binding the contract method 0x4032b72b.
//
// Solidity: function addKeeper(address keeper) returns()
func (_ContractTaskExecutionHub *ContractTaskExecutionHubSession) AddKeeper(keeper common.Address) (*types.Transaction, error) {
	return _ContractTaskExecutionHub.Contract.AddKeeper(&_ContractTaskExecutionHub.TransactOpts, keeper)
}

// AddKeeper is a paid mutator transaction binding the contract method 0x4032b72b.
//
// Solidity: function addKeeper(address keeper) returns()
func (_ContractTaskExecutionHub *ContractTaskExecutionHubTransactorSession) AddKeeper(keeper common.Address) (*types.Transaction, error) {
	return _ContractTaskExecutionHub.Contract.AddKeeper(&_ContractTaskExecutionHub.TransactOpts, keeper)
}

// AddSpokes is a paid mutator transaction binding the contract method 0x14bc03fb.
//
// Solidity: function addSpokes(uint32[] _dstEids) returns()
func (_ContractTaskExecutionHub *ContractTaskExecutionHubTransactor) AddSpokes(opts *bind.TransactOpts, _dstEids []uint32) (*types.Transaction, error) {
	return _ContractTaskExecutionHub.contract.Transact(opts, "addSpokes", _dstEids)
}

// AddSpokes is a paid mutator transaction binding the contract method 0x14bc03fb.
//
// Solidity: function addSpokes(uint32[] _dstEids) returns()
func (_ContractTaskExecutionHub *ContractTaskExecutionHubSession) AddSpokes(_dstEids []uint32) (*types.Transaction, error) {
	return _ContractTaskExecutionHub.Contract.AddSpokes(&_ContractTaskExecutionHub.TransactOpts, _dstEids)
}

// AddSpokes is a paid mutator transaction binding the contract method 0x14bc03fb.
//
// Solidity: function addSpokes(uint32[] _dstEids) returns()
func (_ContractTaskExecutionHub *ContractTaskExecutionHubTransactorSession) AddSpokes(_dstEids []uint32) (*types.Transaction, error) {
	return _ContractTaskExecutionHub.Contract.AddSpokes(&_ContractTaskExecutionHub.TransactOpts, _dstEids)
}

// ExecuteFunction is a paid mutator transaction binding the contract method 0xfa9b1a80.
//
// Solidity: function executeFunction(uint256 jobId, uint256 tgAmount, address target, bytes data) payable returns()
func (_ContractTaskExecutionHub *ContractTaskExecutionHubTransactor) ExecuteFunction(opts *bind.TransactOpts, jobId *big.Int, tgAmount *big.Int, target common.Address, data []byte) (*types.Transaction, error) {
	return _ContractTaskExecutionHub.contract.Transact(opts, "executeFunction", jobId, tgAmount, target, data)
}

// ExecuteFunction is a paid mutator transaction binding the contract method 0xfa9b1a80.
//
// Solidity: function executeFunction(uint256 jobId, uint256 tgAmount, address target, bytes data) payable returns()
func (_ContractTaskExecutionHub *ContractTaskExecutionHubSession) ExecuteFunction(jobId *big.Int, tgAmount *big.Int, target common.Address, data []byte) (*types.Transaction, error) {
	return _ContractTaskExecutionHub.Contract.ExecuteFunction(&_ContractTaskExecutionHub.TransactOpts, jobId, tgAmount, target, data)
}

// ExecuteFunction is a paid mutator transaction binding the contract method 0xfa9b1a80.
//
// Solidity: function executeFunction(uint256 jobId, uint256 tgAmount, address target, bytes data) payable returns()
func (_ContractTaskExecutionHub *ContractTaskExecutionHubTransactorSession) ExecuteFunction(jobId *big.Int, tgAmount *big.Int, target common.Address, data []byte) (*types.Transaction, error) {
	return _ContractTaskExecutionHub.Contract.ExecuteFunction(&_ContractTaskExecutionHub.TransactOpts, jobId, tgAmount, target, data)
}

// Initialize is a paid mutator transaction binding the contract method 0x9c983124.
//
// Solidity: function initialize(address _ownerAddress, uint32 _srcEid, uint32 _originEid, address[] _initialKeepers, address _jobRegistryAddress, address _triggerGasRegistryAddress) returns()
func (_ContractTaskExecutionHub *ContractTaskExecutionHubTransactor) Initialize(opts *bind.TransactOpts, _ownerAddress common.Address, _srcEid uint32, _originEid uint32, _initialKeepers []common.Address, _jobRegistryAddress common.Address, _triggerGasRegistryAddress common.Address) (*types.Transaction, error) {
	return _ContractTaskExecutionHub.contract.Transact(opts, "initialize", _ownerAddress, _srcEid, _originEid, _initialKeepers, _jobRegistryAddress, _triggerGasRegistryAddress)
}

// Initialize is a paid mutator transaction binding the contract method 0x9c983124.
//
// Solidity: function initialize(address _ownerAddress, uint32 _srcEid, uint32 _originEid, address[] _initialKeepers, address _jobRegistryAddress, address _triggerGasRegistryAddress) returns()
func (_ContractTaskExecutionHub *ContractTaskExecutionHubSession) Initialize(_ownerAddress common.Address, _srcEid uint32, _originEid uint32, _initialKeepers []common.Address, _jobRegistryAddress common.Address, _triggerGasRegistryAddress common.Address) (*types.Transaction, error) {
	return _ContractTaskExecutionHub.Contract.Initialize(&_ContractTaskExecutionHub.TransactOpts, _ownerAddress, _srcEid, _originEid, _initialKeepers, _jobRegistryAddress, _triggerGasRegistryAddress)
}

// Initialize is a paid mutator transaction binding the contract method 0x9c983124.
//
// Solidity: function initialize(address _ownerAddress, uint32 _srcEid, uint32 _originEid, address[] _initialKeepers, address _jobRegistryAddress, address _triggerGasRegistryAddress) returns()
func (_ContractTaskExecutionHub *ContractTaskExecutionHubTransactorSession) Initialize(_ownerAddress common.Address, _srcEid uint32, _originEid uint32, _initialKeepers []common.Address, _jobRegistryAddress common.Address, _triggerGasRegistryAddress common.Address) (*types.Transaction, error) {
	return _ContractTaskExecutionHub.Contract.Initialize(&_ContractTaskExecutionHub.TransactOpts, _ownerAddress, _srcEid, _originEid, _initialKeepers, _jobRegistryAddress, _triggerGasRegistryAddress)
}

// LzReceive is a paid mutator transaction binding the contract method 0x13137d65.
//
// Solidity: function lzReceive((uint32,bytes32,uint64) _origin, bytes32 _guid, bytes _message, address _executor, bytes _extraData) payable returns()
func (_ContractTaskExecutionHub *ContractTaskExecutionHubTransactor) LzReceive(opts *bind.TransactOpts, _origin Origin, _guid [32]byte, _message []byte, _executor common.Address, _extraData []byte) (*types.Transaction, error) {
	return _ContractTaskExecutionHub.contract.Transact(opts, "lzReceive", _origin, _guid, _message, _executor, _extraData)
}

// LzReceive is a paid mutator transaction binding the contract method 0x13137d65.
//
// Solidity: function lzReceive((uint32,bytes32,uint64) _origin, bytes32 _guid, bytes _message, address _executor, bytes _extraData) payable returns()
func (_ContractTaskExecutionHub *ContractTaskExecutionHubSession) LzReceive(_origin Origin, _guid [32]byte, _message []byte, _executor common.Address, _extraData []byte) (*types.Transaction, error) {
	return _ContractTaskExecutionHub.Contract.LzReceive(&_ContractTaskExecutionHub.TransactOpts, _origin, _guid, _message, _executor, _extraData)
}

// LzReceive is a paid mutator transaction binding the contract method 0x13137d65.
//
// Solidity: function lzReceive((uint32,bytes32,uint64) _origin, bytes32 _guid, bytes _message, address _executor, bytes _extraData) payable returns()
func (_ContractTaskExecutionHub *ContractTaskExecutionHubTransactorSession) LzReceive(_origin Origin, _guid [32]byte, _message []byte, _executor common.Address, _extraData []byte) (*types.Transaction, error) {
	return _ContractTaskExecutionHub.Contract.LzReceive(&_ContractTaskExecutionHub.TransactOpts, _origin, _guid, _message, _executor, _extraData)
}

// RemoveKeeper is a paid mutator transaction binding the contract method 0x14ae9f2e.
//
// Solidity: function removeKeeper(address keeper) returns()
func (_ContractTaskExecutionHub *ContractTaskExecutionHubTransactor) RemoveKeeper(opts *bind.TransactOpts, keeper common.Address) (*types.Transaction, error) {
	return _ContractTaskExecutionHub.contract.Transact(opts, "removeKeeper", keeper)
}

// RemoveKeeper is a paid mutator transaction binding the contract method 0x14ae9f2e.
//
// Solidity: function removeKeeper(address keeper) returns()
func (_ContractTaskExecutionHub *ContractTaskExecutionHubSession) RemoveKeeper(keeper common.Address) (*types.Transaction, error) {
	return _ContractTaskExecutionHub.Contract.RemoveKeeper(&_ContractTaskExecutionHub.TransactOpts, keeper)
}

// RemoveKeeper is a paid mutator transaction binding the contract method 0x14ae9f2e.
//
// Solidity: function removeKeeper(address keeper) returns()
func (_ContractTaskExecutionHub *ContractTaskExecutionHubTransactorSession) RemoveKeeper(keeper common.Address) (*types.Transaction, error) {
	return _ContractTaskExecutionHub.Contract.RemoveKeeper(&_ContractTaskExecutionHub.TransactOpts, keeper)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ContractTaskExecutionHub *ContractTaskExecutionHubTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractTaskExecutionHub.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ContractTaskExecutionHub *ContractTaskExecutionHubSession) RenounceOwnership() (*types.Transaction, error) {
	return _ContractTaskExecutionHub.Contract.RenounceOwnership(&_ContractTaskExecutionHub.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ContractTaskExecutionHub *ContractTaskExecutionHubTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _ContractTaskExecutionHub.Contract.RenounceOwnership(&_ContractTaskExecutionHub.TransactOpts)
}

// SetDelegate is a paid mutator transaction binding the contract method 0xca5eb5e1.
//
// Solidity: function setDelegate(address _delegate) returns()
func (_ContractTaskExecutionHub *ContractTaskExecutionHubTransactor) SetDelegate(opts *bind.TransactOpts, _delegate common.Address) (*types.Transaction, error) {
	return _ContractTaskExecutionHub.contract.Transact(opts, "setDelegate", _delegate)
}

// SetDelegate is a paid mutator transaction binding the contract method 0xca5eb5e1.
//
// Solidity: function setDelegate(address _delegate) returns()
func (_ContractTaskExecutionHub *ContractTaskExecutionHubSession) SetDelegate(_delegate common.Address) (*types.Transaction, error) {
	return _ContractTaskExecutionHub.Contract.SetDelegate(&_ContractTaskExecutionHub.TransactOpts, _delegate)
}

// SetDelegate is a paid mutator transaction binding the contract method 0xca5eb5e1.
//
// Solidity: function setDelegate(address _delegate) returns()
func (_ContractTaskExecutionHub *ContractTaskExecutionHubTransactorSession) SetDelegate(_delegate common.Address) (*types.Transaction, error) {
	return _ContractTaskExecutionHub.Contract.SetDelegate(&_ContractTaskExecutionHub.TransactOpts, _delegate)
}

// SetEnforcedOptions is a paid mutator transaction binding the contract method 0xb98bd070.
//
// Solidity: function setEnforcedOptions((uint32,uint16,bytes)[] _enforcedOptions) returns()
func (_ContractTaskExecutionHub *ContractTaskExecutionHubTransactor) SetEnforcedOptions(opts *bind.TransactOpts, _enforcedOptions []EnforcedOptionParam) (*types.Transaction, error) {
	return _ContractTaskExecutionHub.contract.Transact(opts, "setEnforcedOptions", _enforcedOptions)
}

// SetEnforcedOptions is a paid mutator transaction binding the contract method 0xb98bd070.
//
// Solidity: function setEnforcedOptions((uint32,uint16,bytes)[] _enforcedOptions) returns()
func (_ContractTaskExecutionHub *ContractTaskExecutionHubSession) SetEnforcedOptions(_enforcedOptions []EnforcedOptionParam) (*types.Transaction, error) {
	return _ContractTaskExecutionHub.Contract.SetEnforcedOptions(&_ContractTaskExecutionHub.TransactOpts, _enforcedOptions)
}

// SetEnforcedOptions is a paid mutator transaction binding the contract method 0xb98bd070.
//
// Solidity: function setEnforcedOptions((uint32,uint16,bytes)[] _enforcedOptions) returns()
func (_ContractTaskExecutionHub *ContractTaskExecutionHubTransactorSession) SetEnforcedOptions(_enforcedOptions []EnforcedOptionParam) (*types.Transaction, error) {
	return _ContractTaskExecutionHub.Contract.SetEnforcedOptions(&_ContractTaskExecutionHub.TransactOpts, _enforcedOptions)
}

// SetGasConfig is a paid mutator transaction binding the contract method 0x76a9b1f8.
//
// Solidity: function setGasConfig(uint128 gas, uint128 value) returns()
func (_ContractTaskExecutionHub *ContractTaskExecutionHubTransactor) SetGasConfig(opts *bind.TransactOpts, gas *big.Int, value *big.Int) (*types.Transaction, error) {
	return _ContractTaskExecutionHub.contract.Transact(opts, "setGasConfig", gas, value)
}

// SetGasConfig is a paid mutator transaction binding the contract method 0x76a9b1f8.
//
// Solidity: function setGasConfig(uint128 gas, uint128 value) returns()
func (_ContractTaskExecutionHub *ContractTaskExecutionHubSession) SetGasConfig(gas *big.Int, value *big.Int) (*types.Transaction, error) {
	return _ContractTaskExecutionHub.Contract.SetGasConfig(&_ContractTaskExecutionHub.TransactOpts, gas, value)
}

// SetGasConfig is a paid mutator transaction binding the contract method 0x76a9b1f8.
//
// Solidity: function setGasConfig(uint128 gas, uint128 value) returns()
func (_ContractTaskExecutionHub *ContractTaskExecutionHubTransactorSession) SetGasConfig(gas *big.Int, value *big.Int) (*types.Transaction, error) {
	return _ContractTaskExecutionHub.Contract.SetGasConfig(&_ContractTaskExecutionHub.TransactOpts, gas, value)
}

// SetPeer is a paid mutator transaction binding the contract method 0x3400288b.
//
// Solidity: function setPeer(uint32 _eid, bytes32 _peer) returns()
func (_ContractTaskExecutionHub *ContractTaskExecutionHubTransactor) SetPeer(opts *bind.TransactOpts, _eid uint32, _peer [32]byte) (*types.Transaction, error) {
	return _ContractTaskExecutionHub.contract.Transact(opts, "setPeer", _eid, _peer)
}

// SetPeer is a paid mutator transaction binding the contract method 0x3400288b.
//
// Solidity: function setPeer(uint32 _eid, bytes32 _peer) returns()
func (_ContractTaskExecutionHub *ContractTaskExecutionHubSession) SetPeer(_eid uint32, _peer [32]byte) (*types.Transaction, error) {
	return _ContractTaskExecutionHub.Contract.SetPeer(&_ContractTaskExecutionHub.TransactOpts, _eid, _peer)
}

// SetPeer is a paid mutator transaction binding the contract method 0x3400288b.
//
// Solidity: function setPeer(uint32 _eid, bytes32 _peer) returns()
func (_ContractTaskExecutionHub *ContractTaskExecutionHubTransactorSession) SetPeer(_eid uint32, _peer [32]byte) (*types.Transaction, error) {
	return _ContractTaskExecutionHub.Contract.SetPeer(&_ContractTaskExecutionHub.TransactOpts, _eid, _peer)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ContractTaskExecutionHub *ContractTaskExecutionHubTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _ContractTaskExecutionHub.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ContractTaskExecutionHub *ContractTaskExecutionHubSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ContractTaskExecutionHub.Contract.TransferOwnership(&_ContractTaskExecutionHub.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ContractTaskExecutionHub *ContractTaskExecutionHubTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ContractTaskExecutionHub.Contract.TransferOwnership(&_ContractTaskExecutionHub.TransactOpts, newOwner)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_ContractTaskExecutionHub *ContractTaskExecutionHubTransactor) UpgradeToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _ContractTaskExecutionHub.contract.Transact(opts, "upgradeToAndCall", newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_ContractTaskExecutionHub *ContractTaskExecutionHubSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _ContractTaskExecutionHub.Contract.UpgradeToAndCall(&_ContractTaskExecutionHub.TransactOpts, newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_ContractTaskExecutionHub *ContractTaskExecutionHubTransactorSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _ContractTaskExecutionHub.Contract.UpgradeToAndCall(&_ContractTaskExecutionHub.TransactOpts, newImplementation, data)
}

// Withdraw is a paid mutator transaction binding the contract method 0xf3fef3a3.
//
// Solidity: function withdraw(address to, uint256 amount) returns()
func (_ContractTaskExecutionHub *ContractTaskExecutionHubTransactor) Withdraw(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ContractTaskExecutionHub.contract.Transact(opts, "withdraw", to, amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0xf3fef3a3.
//
// Solidity: function withdraw(address to, uint256 amount) returns()
func (_ContractTaskExecutionHub *ContractTaskExecutionHubSession) Withdraw(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ContractTaskExecutionHub.Contract.Withdraw(&_ContractTaskExecutionHub.TransactOpts, to, amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0xf3fef3a3.
//
// Solidity: function withdraw(address to, uint256 amount) returns()
func (_ContractTaskExecutionHub *ContractTaskExecutionHubTransactorSession) Withdraw(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ContractTaskExecutionHub.Contract.Withdraw(&_ContractTaskExecutionHub.TransactOpts, to, amount)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_ContractTaskExecutionHub *ContractTaskExecutionHubTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractTaskExecutionHub.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_ContractTaskExecutionHub *ContractTaskExecutionHubSession) Receive() (*types.Transaction, error) {
	return _ContractTaskExecutionHub.Contract.Receive(&_ContractTaskExecutionHub.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_ContractTaskExecutionHub *ContractTaskExecutionHubTransactorSession) Receive() (*types.Transaction, error) {
	return _ContractTaskExecutionHub.Contract.Receive(&_ContractTaskExecutionHub.TransactOpts)
}

// ContractTaskExecutionHubBroadcastSentIterator is returned from FilterBroadcastSent and is used to iterate over the raw logs and unpacked data for BroadcastSent events raised by the ContractTaskExecutionHub contract.
type ContractTaskExecutionHubBroadcastSentIterator struct {
	Event *ContractTaskExecutionHubBroadcastSent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractTaskExecutionHubBroadcastSentIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractTaskExecutionHubBroadcastSent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractTaskExecutionHubBroadcastSent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractTaskExecutionHubBroadcastSentIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractTaskExecutionHubBroadcastSentIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractTaskExecutionHubBroadcastSent represents a BroadcastSent event raised by the ContractTaskExecutionHub contract.
type ContractTaskExecutionHubBroadcastSent struct {
	Action uint8
	Keeper common.Address
	DstEid uint32
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBroadcastSent is a free log retrieval operation binding the contract event 0x43cd42d638b31afc582e32f34f92ec252d43317313f573b84478d17a4b1706cc.
//
// Solidity: event BroadcastSent(uint8 action, address keeper, uint32 dstEid)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubFilterer) FilterBroadcastSent(opts *bind.FilterOpts) (*ContractTaskExecutionHubBroadcastSentIterator, error) {

	logs, sub, err := _ContractTaskExecutionHub.contract.FilterLogs(opts, "BroadcastSent")
	if err != nil {
		return nil, err
	}
	return &ContractTaskExecutionHubBroadcastSentIterator{contract: _ContractTaskExecutionHub.contract, event: "BroadcastSent", logs: logs, sub: sub}, nil
}

// WatchBroadcastSent is a free log subscription operation binding the contract event 0x43cd42d638b31afc582e32f34f92ec252d43317313f573b84478d17a4b1706cc.
//
// Solidity: event BroadcastSent(uint8 action, address keeper, uint32 dstEid)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubFilterer) WatchBroadcastSent(opts *bind.WatchOpts, sink chan<- *ContractTaskExecutionHubBroadcastSent) (event.Subscription, error) {

	logs, sub, err := _ContractTaskExecutionHub.contract.WatchLogs(opts, "BroadcastSent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractTaskExecutionHubBroadcastSent)
				if err := _ContractTaskExecutionHub.contract.UnpackLog(event, "BroadcastSent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBroadcastSent is a log parse operation binding the contract event 0x43cd42d638b31afc582e32f34f92ec252d43317313f573b84478d17a4b1706cc.
//
// Solidity: event BroadcastSent(uint8 action, address keeper, uint32 dstEid)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubFilterer) ParseBroadcastSent(log types.Log) (*ContractTaskExecutionHubBroadcastSent, error) {
	event := new(ContractTaskExecutionHubBroadcastSent)
	if err := _ContractTaskExecutionHub.contract.UnpackLog(event, "BroadcastSent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractTaskExecutionHubEnforcedOptionSetIterator is returned from FilterEnforcedOptionSet and is used to iterate over the raw logs and unpacked data for EnforcedOptionSet events raised by the ContractTaskExecutionHub contract.
type ContractTaskExecutionHubEnforcedOptionSetIterator struct {
	Event *ContractTaskExecutionHubEnforcedOptionSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractTaskExecutionHubEnforcedOptionSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractTaskExecutionHubEnforcedOptionSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractTaskExecutionHubEnforcedOptionSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractTaskExecutionHubEnforcedOptionSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractTaskExecutionHubEnforcedOptionSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractTaskExecutionHubEnforcedOptionSet represents a EnforcedOptionSet event raised by the ContractTaskExecutionHub contract.
type ContractTaskExecutionHubEnforcedOptionSet struct {
	EnforcedOptions []EnforcedOptionParam
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterEnforcedOptionSet is a free log retrieval operation binding the contract event 0xbe4864a8e820971c0247f5992e2da559595f7bf076a21cb5928d443d2a13b674.
//
// Solidity: event EnforcedOptionSet((uint32,uint16,bytes)[] _enforcedOptions)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubFilterer) FilterEnforcedOptionSet(opts *bind.FilterOpts) (*ContractTaskExecutionHubEnforcedOptionSetIterator, error) {

	logs, sub, err := _ContractTaskExecutionHub.contract.FilterLogs(opts, "EnforcedOptionSet")
	if err != nil {
		return nil, err
	}
	return &ContractTaskExecutionHubEnforcedOptionSetIterator{contract: _ContractTaskExecutionHub.contract, event: "EnforcedOptionSet", logs: logs, sub: sub}, nil
}

// WatchEnforcedOptionSet is a free log subscription operation binding the contract event 0xbe4864a8e820971c0247f5992e2da559595f7bf076a21cb5928d443d2a13b674.
//
// Solidity: event EnforcedOptionSet((uint32,uint16,bytes)[] _enforcedOptions)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubFilterer) WatchEnforcedOptionSet(opts *bind.WatchOpts, sink chan<- *ContractTaskExecutionHubEnforcedOptionSet) (event.Subscription, error) {

	logs, sub, err := _ContractTaskExecutionHub.contract.WatchLogs(opts, "EnforcedOptionSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractTaskExecutionHubEnforcedOptionSet)
				if err := _ContractTaskExecutionHub.contract.UnpackLog(event, "EnforcedOptionSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEnforcedOptionSet is a log parse operation binding the contract event 0xbe4864a8e820971c0247f5992e2da559595f7bf076a21cb5928d443d2a13b674.
//
// Solidity: event EnforcedOptionSet((uint32,uint16,bytes)[] _enforcedOptions)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubFilterer) ParseEnforcedOptionSet(log types.Log) (*ContractTaskExecutionHubEnforcedOptionSet, error) {
	event := new(ContractTaskExecutionHubEnforcedOptionSet)
	if err := _ContractTaskExecutionHub.contract.UnpackLog(event, "EnforcedOptionSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractTaskExecutionHubFeeUsedIterator is returned from FilterFeeUsed and is used to iterate over the raw logs and unpacked data for FeeUsed events raised by the ContractTaskExecutionHub contract.
type ContractTaskExecutionHubFeeUsedIterator struct {
	Event *ContractTaskExecutionHubFeeUsed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractTaskExecutionHubFeeUsedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractTaskExecutionHubFeeUsed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractTaskExecutionHubFeeUsed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractTaskExecutionHubFeeUsedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractTaskExecutionHubFeeUsedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractTaskExecutionHubFeeUsed represents a FeeUsed event raised by the ContractTaskExecutionHub contract.
type ContractTaskExecutionHubFeeUsed struct {
	DstEid uint32
	Fee    *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterFeeUsed is a free log retrieval operation binding the contract event 0x7f8a66afaab7a89758bc21c10c08f65792a914c8459da50f53d4d6a6584d9193.
//
// Solidity: event FeeUsed(uint32 dstEid, uint256 fee)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubFilterer) FilterFeeUsed(opts *bind.FilterOpts) (*ContractTaskExecutionHubFeeUsedIterator, error) {

	logs, sub, err := _ContractTaskExecutionHub.contract.FilterLogs(opts, "FeeUsed")
	if err != nil {
		return nil, err
	}
	return &ContractTaskExecutionHubFeeUsedIterator{contract: _ContractTaskExecutionHub.contract, event: "FeeUsed", logs: logs, sub: sub}, nil
}

// WatchFeeUsed is a free log subscription operation binding the contract event 0x7f8a66afaab7a89758bc21c10c08f65792a914c8459da50f53d4d6a6584d9193.
//
// Solidity: event FeeUsed(uint32 dstEid, uint256 fee)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubFilterer) WatchFeeUsed(opts *bind.WatchOpts, sink chan<- *ContractTaskExecutionHubFeeUsed) (event.Subscription, error) {

	logs, sub, err := _ContractTaskExecutionHub.contract.WatchLogs(opts, "FeeUsed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractTaskExecutionHubFeeUsed)
				if err := _ContractTaskExecutionHub.contract.UnpackLog(event, "FeeUsed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFeeUsed is a log parse operation binding the contract event 0x7f8a66afaab7a89758bc21c10c08f65792a914c8459da50f53d4d6a6584d9193.
//
// Solidity: event FeeUsed(uint32 dstEid, uint256 fee)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubFilterer) ParseFeeUsed(log types.Log) (*ContractTaskExecutionHubFeeUsed, error) {
	event := new(ContractTaskExecutionHubFeeUsed)
	if err := _ContractTaskExecutionHub.contract.UnpackLog(event, "FeeUsed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractTaskExecutionHubFunctionExecutedIterator is returned from FilterFunctionExecuted and is used to iterate over the raw logs and unpacked data for FunctionExecuted events raised by the ContractTaskExecutionHub contract.
type ContractTaskExecutionHubFunctionExecutedIterator struct {
	Event *ContractTaskExecutionHubFunctionExecuted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractTaskExecutionHubFunctionExecutedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractTaskExecutionHubFunctionExecuted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractTaskExecutionHubFunctionExecuted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractTaskExecutionHubFunctionExecutedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractTaskExecutionHubFunctionExecutedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractTaskExecutionHubFunctionExecuted represents a FunctionExecuted event raised by the ContractTaskExecutionHub contract.
type ContractTaskExecutionHubFunctionExecuted struct {
	Keeper common.Address
	Target common.Address
	Data   []byte
	Value  *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterFunctionExecuted is a free log retrieval operation binding the contract event 0xf4448cdaf10358453fa19b2e0363f44780277619bd9bb676eef79d7488a7d274.
//
// Solidity: event FunctionExecuted(address indexed keeper, address indexed target, bytes data, uint256 value)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubFilterer) FilterFunctionExecuted(opts *bind.FilterOpts, keeper []common.Address, target []common.Address) (*ContractTaskExecutionHubFunctionExecutedIterator, error) {

	var keeperRule []interface{}
	for _, keeperItem := range keeper {
		keeperRule = append(keeperRule, keeperItem)
	}
	var targetRule []interface{}
	for _, targetItem := range target {
		targetRule = append(targetRule, targetItem)
	}

	logs, sub, err := _ContractTaskExecutionHub.contract.FilterLogs(opts, "FunctionExecuted", keeperRule, targetRule)
	if err != nil {
		return nil, err
	}
	return &ContractTaskExecutionHubFunctionExecutedIterator{contract: _ContractTaskExecutionHub.contract, event: "FunctionExecuted", logs: logs, sub: sub}, nil
}

// WatchFunctionExecuted is a free log subscription operation binding the contract event 0xf4448cdaf10358453fa19b2e0363f44780277619bd9bb676eef79d7488a7d274.
//
// Solidity: event FunctionExecuted(address indexed keeper, address indexed target, bytes data, uint256 value)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubFilterer) WatchFunctionExecuted(opts *bind.WatchOpts, sink chan<- *ContractTaskExecutionHubFunctionExecuted, keeper []common.Address, target []common.Address) (event.Subscription, error) {

	var keeperRule []interface{}
	for _, keeperItem := range keeper {
		keeperRule = append(keeperRule, keeperItem)
	}
	var targetRule []interface{}
	for _, targetItem := range target {
		targetRule = append(targetRule, targetItem)
	}

	logs, sub, err := _ContractTaskExecutionHub.contract.WatchLogs(opts, "FunctionExecuted", keeperRule, targetRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractTaskExecutionHubFunctionExecuted)
				if err := _ContractTaskExecutionHub.contract.UnpackLog(event, "FunctionExecuted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFunctionExecuted is a log parse operation binding the contract event 0xf4448cdaf10358453fa19b2e0363f44780277619bd9bb676eef79d7488a7d274.
//
// Solidity: event FunctionExecuted(address indexed keeper, address indexed target, bytes data, uint256 value)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubFilterer) ParseFunctionExecuted(log types.Log) (*ContractTaskExecutionHubFunctionExecuted, error) {
	event := new(ContractTaskExecutionHubFunctionExecuted)
	if err := _ContractTaskExecutionHub.contract.UnpackLog(event, "FunctionExecuted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractTaskExecutionHubGasConfigUpdatedIterator is returned from FilterGasConfigUpdated and is used to iterate over the raw logs and unpacked data for GasConfigUpdated events raised by the ContractTaskExecutionHub contract.
type ContractTaskExecutionHubGasConfigUpdatedIterator struct {
	Event *ContractTaskExecutionHubGasConfigUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractTaskExecutionHubGasConfigUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractTaskExecutionHubGasConfigUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractTaskExecutionHubGasConfigUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractTaskExecutionHubGasConfigUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractTaskExecutionHubGasConfigUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractTaskExecutionHubGasConfigUpdated represents a GasConfigUpdated event raised by the ContractTaskExecutionHub contract.
type ContractTaskExecutionHubGasConfigUpdated struct {
	Gas   *big.Int
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterGasConfigUpdated is a free log retrieval operation binding the contract event 0xd7a0084aec960f13956a34c7a5a0ce5e4620bca53376284f7a612f0ddcd1efd5.
//
// Solidity: event GasConfigUpdated(uint128 gas, uint128 value)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubFilterer) FilterGasConfigUpdated(opts *bind.FilterOpts) (*ContractTaskExecutionHubGasConfigUpdatedIterator, error) {

	logs, sub, err := _ContractTaskExecutionHub.contract.FilterLogs(opts, "GasConfigUpdated")
	if err != nil {
		return nil, err
	}
	return &ContractTaskExecutionHubGasConfigUpdatedIterator{contract: _ContractTaskExecutionHub.contract, event: "GasConfigUpdated", logs: logs, sub: sub}, nil
}

// WatchGasConfigUpdated is a free log subscription operation binding the contract event 0xd7a0084aec960f13956a34c7a5a0ce5e4620bca53376284f7a612f0ddcd1efd5.
//
// Solidity: event GasConfigUpdated(uint128 gas, uint128 value)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubFilterer) WatchGasConfigUpdated(opts *bind.WatchOpts, sink chan<- *ContractTaskExecutionHubGasConfigUpdated) (event.Subscription, error) {

	logs, sub, err := _ContractTaskExecutionHub.contract.WatchLogs(opts, "GasConfigUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractTaskExecutionHubGasConfigUpdated)
				if err := _ContractTaskExecutionHub.contract.UnpackLog(event, "GasConfigUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseGasConfigUpdated is a log parse operation binding the contract event 0xd7a0084aec960f13956a34c7a5a0ce5e4620bca53376284f7a612f0ddcd1efd5.
//
// Solidity: event GasConfigUpdated(uint128 gas, uint128 value)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubFilterer) ParseGasConfigUpdated(log types.Log) (*ContractTaskExecutionHubGasConfigUpdated, error) {
	event := new(ContractTaskExecutionHubGasConfigUpdated)
	if err := _ContractTaskExecutionHub.contract.UnpackLog(event, "GasConfigUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractTaskExecutionHubInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the ContractTaskExecutionHub contract.
type ContractTaskExecutionHubInitializedIterator struct {
	Event *ContractTaskExecutionHubInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractTaskExecutionHubInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractTaskExecutionHubInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractTaskExecutionHubInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractTaskExecutionHubInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractTaskExecutionHubInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractTaskExecutionHubInitialized represents a Initialized event raised by the ContractTaskExecutionHub contract.
type ContractTaskExecutionHubInitialized struct {
	Version uint64
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubFilterer) FilterInitialized(opts *bind.FilterOpts) (*ContractTaskExecutionHubInitializedIterator, error) {

	logs, sub, err := _ContractTaskExecutionHub.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &ContractTaskExecutionHubInitializedIterator{contract: _ContractTaskExecutionHub.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *ContractTaskExecutionHubInitialized) (event.Subscription, error) {

	logs, sub, err := _ContractTaskExecutionHub.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractTaskExecutionHubInitialized)
				if err := _ContractTaskExecutionHub.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubFilterer) ParseInitialized(log types.Log) (*ContractTaskExecutionHubInitialized, error) {
	event := new(ContractTaskExecutionHubInitialized)
	if err := _ContractTaskExecutionHub.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractTaskExecutionHubKeeperRegisteredIterator is returned from FilterKeeperRegistered and is used to iterate over the raw logs and unpacked data for KeeperRegistered events raised by the ContractTaskExecutionHub contract.
type ContractTaskExecutionHubKeeperRegisteredIterator struct {
	Event *ContractTaskExecutionHubKeeperRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractTaskExecutionHubKeeperRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractTaskExecutionHubKeeperRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractTaskExecutionHubKeeperRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractTaskExecutionHubKeeperRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractTaskExecutionHubKeeperRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractTaskExecutionHubKeeperRegistered represents a KeeperRegistered event raised by the ContractTaskExecutionHub contract.
type ContractTaskExecutionHubKeeperRegistered struct {
	Keeper common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterKeeperRegistered is a free log retrieval operation binding the contract event 0x1ecf9d662f201ac523808305cfcb9f1f2a8241b7fb3444333b5b4ee8f7e50b07.
//
// Solidity: event KeeperRegistered(address indexed keeper)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubFilterer) FilterKeeperRegistered(opts *bind.FilterOpts, keeper []common.Address) (*ContractTaskExecutionHubKeeperRegisteredIterator, error) {

	var keeperRule []interface{}
	for _, keeperItem := range keeper {
		keeperRule = append(keeperRule, keeperItem)
	}

	logs, sub, err := _ContractTaskExecutionHub.contract.FilterLogs(opts, "KeeperRegistered", keeperRule)
	if err != nil {
		return nil, err
	}
	return &ContractTaskExecutionHubKeeperRegisteredIterator{contract: _ContractTaskExecutionHub.contract, event: "KeeperRegistered", logs: logs, sub: sub}, nil
}

// WatchKeeperRegistered is a free log subscription operation binding the contract event 0x1ecf9d662f201ac523808305cfcb9f1f2a8241b7fb3444333b5b4ee8f7e50b07.
//
// Solidity: event KeeperRegistered(address indexed keeper)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubFilterer) WatchKeeperRegistered(opts *bind.WatchOpts, sink chan<- *ContractTaskExecutionHubKeeperRegistered, keeper []common.Address) (event.Subscription, error) {

	var keeperRule []interface{}
	for _, keeperItem := range keeper {
		keeperRule = append(keeperRule, keeperItem)
	}

	logs, sub, err := _ContractTaskExecutionHub.contract.WatchLogs(opts, "KeeperRegistered", keeperRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractTaskExecutionHubKeeperRegistered)
				if err := _ContractTaskExecutionHub.contract.UnpackLog(event, "KeeperRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKeeperRegistered is a log parse operation binding the contract event 0x1ecf9d662f201ac523808305cfcb9f1f2a8241b7fb3444333b5b4ee8f7e50b07.
//
// Solidity: event KeeperRegistered(address indexed keeper)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubFilterer) ParseKeeperRegistered(log types.Log) (*ContractTaskExecutionHubKeeperRegistered, error) {
	event := new(ContractTaskExecutionHubKeeperRegistered)
	if err := _ContractTaskExecutionHub.contract.UnpackLog(event, "KeeperRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractTaskExecutionHubKeeperUnregisteredIterator is returned from FilterKeeperUnregistered and is used to iterate over the raw logs and unpacked data for KeeperUnregistered events raised by the ContractTaskExecutionHub contract.
type ContractTaskExecutionHubKeeperUnregisteredIterator struct {
	Event *ContractTaskExecutionHubKeeperUnregistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractTaskExecutionHubKeeperUnregisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractTaskExecutionHubKeeperUnregistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractTaskExecutionHubKeeperUnregistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractTaskExecutionHubKeeperUnregisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractTaskExecutionHubKeeperUnregisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractTaskExecutionHubKeeperUnregistered represents a KeeperUnregistered event raised by the ContractTaskExecutionHub contract.
type ContractTaskExecutionHubKeeperUnregistered struct {
	Keeper common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterKeeperUnregistered is a free log retrieval operation binding the contract event 0x3d3b6e859e3dde2c83580d0bc85d58188abff18c72fccd0e167b04d70bcbf6cf.
//
// Solidity: event KeeperUnregistered(address indexed keeper)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubFilterer) FilterKeeperUnregistered(opts *bind.FilterOpts, keeper []common.Address) (*ContractTaskExecutionHubKeeperUnregisteredIterator, error) {

	var keeperRule []interface{}
	for _, keeperItem := range keeper {
		keeperRule = append(keeperRule, keeperItem)
	}

	logs, sub, err := _ContractTaskExecutionHub.contract.FilterLogs(opts, "KeeperUnregistered", keeperRule)
	if err != nil {
		return nil, err
	}
	return &ContractTaskExecutionHubKeeperUnregisteredIterator{contract: _ContractTaskExecutionHub.contract, event: "KeeperUnregistered", logs: logs, sub: sub}, nil
}

// WatchKeeperUnregistered is a free log subscription operation binding the contract event 0x3d3b6e859e3dde2c83580d0bc85d58188abff18c72fccd0e167b04d70bcbf6cf.
//
// Solidity: event KeeperUnregistered(address indexed keeper)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubFilterer) WatchKeeperUnregistered(opts *bind.WatchOpts, sink chan<- *ContractTaskExecutionHubKeeperUnregistered, keeper []common.Address) (event.Subscription, error) {

	var keeperRule []interface{}
	for _, keeperItem := range keeper {
		keeperRule = append(keeperRule, keeperItem)
	}

	logs, sub, err := _ContractTaskExecutionHub.contract.WatchLogs(opts, "KeeperUnregistered", keeperRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractTaskExecutionHubKeeperUnregistered)
				if err := _ContractTaskExecutionHub.contract.UnpackLog(event, "KeeperUnregistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKeeperUnregistered is a log parse operation binding the contract event 0x3d3b6e859e3dde2c83580d0bc85d58188abff18c72fccd0e167b04d70bcbf6cf.
//
// Solidity: event KeeperUnregistered(address indexed keeper)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubFilterer) ParseKeeperUnregistered(log types.Log) (*ContractTaskExecutionHubKeeperUnregistered, error) {
	event := new(ContractTaskExecutionHubKeeperUnregistered)
	if err := _ContractTaskExecutionHub.contract.UnpackLog(event, "KeeperUnregistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractTaskExecutionHubLowBalanceAlertIterator is returned from FilterLowBalanceAlert and is used to iterate over the raw logs and unpacked data for LowBalanceAlert events raised by the ContractTaskExecutionHub contract.
type ContractTaskExecutionHubLowBalanceAlertIterator struct {
	Event *ContractTaskExecutionHubLowBalanceAlert // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractTaskExecutionHubLowBalanceAlertIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractTaskExecutionHubLowBalanceAlert)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractTaskExecutionHubLowBalanceAlert)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractTaskExecutionHubLowBalanceAlertIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractTaskExecutionHubLowBalanceAlertIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractTaskExecutionHubLowBalanceAlert represents a LowBalanceAlert event raised by the ContractTaskExecutionHub contract.
type ContractTaskExecutionHubLowBalanceAlert struct {
	CurrentBalance *big.Int
	Threshold      *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterLowBalanceAlert is a free log retrieval operation binding the contract event 0xb1b538a145d528cb9b8a428a3f47d5730430a03c2d98d7562357ee7db16dbd26.
//
// Solidity: event LowBalanceAlert(uint256 currentBalance, uint256 threshold)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubFilterer) FilterLowBalanceAlert(opts *bind.FilterOpts) (*ContractTaskExecutionHubLowBalanceAlertIterator, error) {

	logs, sub, err := _ContractTaskExecutionHub.contract.FilterLogs(opts, "LowBalanceAlert")
	if err != nil {
		return nil, err
	}
	return &ContractTaskExecutionHubLowBalanceAlertIterator{contract: _ContractTaskExecutionHub.contract, event: "LowBalanceAlert", logs: logs, sub: sub}, nil
}

// WatchLowBalanceAlert is a free log subscription operation binding the contract event 0xb1b538a145d528cb9b8a428a3f47d5730430a03c2d98d7562357ee7db16dbd26.
//
// Solidity: event LowBalanceAlert(uint256 currentBalance, uint256 threshold)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubFilterer) WatchLowBalanceAlert(opts *bind.WatchOpts, sink chan<- *ContractTaskExecutionHubLowBalanceAlert) (event.Subscription, error) {

	logs, sub, err := _ContractTaskExecutionHub.contract.WatchLogs(opts, "LowBalanceAlert")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractTaskExecutionHubLowBalanceAlert)
				if err := _ContractTaskExecutionHub.contract.UnpackLog(event, "LowBalanceAlert", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLowBalanceAlert is a log parse operation binding the contract event 0xb1b538a145d528cb9b8a428a3f47d5730430a03c2d98d7562357ee7db16dbd26.
//
// Solidity: event LowBalanceAlert(uint256 currentBalance, uint256 threshold)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubFilterer) ParseLowBalanceAlert(log types.Log) (*ContractTaskExecutionHubLowBalanceAlert, error) {
	event := new(ContractTaskExecutionHubLowBalanceAlert)
	if err := _ContractTaskExecutionHub.contract.UnpackLog(event, "LowBalanceAlert", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractTaskExecutionHubMessageFailedIterator is returned from FilterMessageFailed and is used to iterate over the raw logs and unpacked data for MessageFailed events raised by the ContractTaskExecutionHub contract.
type ContractTaskExecutionHubMessageFailedIterator struct {
	Event *ContractTaskExecutionHubMessageFailed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractTaskExecutionHubMessageFailedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractTaskExecutionHubMessageFailed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractTaskExecutionHubMessageFailed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractTaskExecutionHubMessageFailedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractTaskExecutionHubMessageFailedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractTaskExecutionHubMessageFailed represents a MessageFailed event raised by the ContractTaskExecutionHub contract.
type ContractTaskExecutionHubMessageFailed struct {
	DstEid uint32
	Guid   [32]byte
	Reason []byte
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterMessageFailed is a free log retrieval operation binding the contract event 0x2254f63be429412a67ef70cf2ef65d61a88074bfd112333e0a449a9e4a7683c8.
//
// Solidity: event MessageFailed(uint32 indexed dstEid, bytes32 indexed guid, bytes reason)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubFilterer) FilterMessageFailed(opts *bind.FilterOpts, dstEid []uint32, guid [][32]byte) (*ContractTaskExecutionHubMessageFailedIterator, error) {

	var dstEidRule []interface{}
	for _, dstEidItem := range dstEid {
		dstEidRule = append(dstEidRule, dstEidItem)
	}
	var guidRule []interface{}
	for _, guidItem := range guid {
		guidRule = append(guidRule, guidItem)
	}

	logs, sub, err := _ContractTaskExecutionHub.contract.FilterLogs(opts, "MessageFailed", dstEidRule, guidRule)
	if err != nil {
		return nil, err
	}
	return &ContractTaskExecutionHubMessageFailedIterator{contract: _ContractTaskExecutionHub.contract, event: "MessageFailed", logs: logs, sub: sub}, nil
}

// WatchMessageFailed is a free log subscription operation binding the contract event 0x2254f63be429412a67ef70cf2ef65d61a88074bfd112333e0a449a9e4a7683c8.
//
// Solidity: event MessageFailed(uint32 indexed dstEid, bytes32 indexed guid, bytes reason)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubFilterer) WatchMessageFailed(opts *bind.WatchOpts, sink chan<- *ContractTaskExecutionHubMessageFailed, dstEid []uint32, guid [][32]byte) (event.Subscription, error) {

	var dstEidRule []interface{}
	for _, dstEidItem := range dstEid {
		dstEidRule = append(dstEidRule, dstEidItem)
	}
	var guidRule []interface{}
	for _, guidItem := range guid {
		guidRule = append(guidRule, guidItem)
	}

	logs, sub, err := _ContractTaskExecutionHub.contract.WatchLogs(opts, "MessageFailed", dstEidRule, guidRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractTaskExecutionHubMessageFailed)
				if err := _ContractTaskExecutionHub.contract.UnpackLog(event, "MessageFailed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMessageFailed is a log parse operation binding the contract event 0x2254f63be429412a67ef70cf2ef65d61a88074bfd112333e0a449a9e4a7683c8.
//
// Solidity: event MessageFailed(uint32 indexed dstEid, bytes32 indexed guid, bytes reason)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubFilterer) ParseMessageFailed(log types.Log) (*ContractTaskExecutionHubMessageFailed, error) {
	event := new(ContractTaskExecutionHubMessageFailed)
	if err := _ContractTaskExecutionHub.contract.UnpackLog(event, "MessageFailed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractTaskExecutionHubOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the ContractTaskExecutionHub contract.
type ContractTaskExecutionHubOwnershipTransferredIterator struct {
	Event *ContractTaskExecutionHubOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractTaskExecutionHubOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractTaskExecutionHubOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractTaskExecutionHubOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractTaskExecutionHubOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractTaskExecutionHubOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractTaskExecutionHubOwnershipTransferred represents a OwnershipTransferred event raised by the ContractTaskExecutionHub contract.
type ContractTaskExecutionHubOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ContractTaskExecutionHubOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ContractTaskExecutionHub.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ContractTaskExecutionHubOwnershipTransferredIterator{contract: _ContractTaskExecutionHub.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ContractTaskExecutionHubOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ContractTaskExecutionHub.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractTaskExecutionHubOwnershipTransferred)
				if err := _ContractTaskExecutionHub.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubFilterer) ParseOwnershipTransferred(log types.Log) (*ContractTaskExecutionHubOwnershipTransferred, error) {
	event := new(ContractTaskExecutionHubOwnershipTransferred)
	if err := _ContractTaskExecutionHub.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractTaskExecutionHubPeerSetIterator is returned from FilterPeerSet and is used to iterate over the raw logs and unpacked data for PeerSet events raised by the ContractTaskExecutionHub contract.
type ContractTaskExecutionHubPeerSetIterator struct {
	Event *ContractTaskExecutionHubPeerSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractTaskExecutionHubPeerSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractTaskExecutionHubPeerSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractTaskExecutionHubPeerSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractTaskExecutionHubPeerSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractTaskExecutionHubPeerSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractTaskExecutionHubPeerSet represents a PeerSet event raised by the ContractTaskExecutionHub contract.
type ContractTaskExecutionHubPeerSet struct {
	Eid  uint32
	Peer [32]byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterPeerSet is a free log retrieval operation binding the contract event 0x238399d427b947898edb290f5ff0f9109849b1c3ba196a42e35f00c50a54b98b.
//
// Solidity: event PeerSet(uint32 eid, bytes32 peer)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubFilterer) FilterPeerSet(opts *bind.FilterOpts) (*ContractTaskExecutionHubPeerSetIterator, error) {

	logs, sub, err := _ContractTaskExecutionHub.contract.FilterLogs(opts, "PeerSet")
	if err != nil {
		return nil, err
	}
	return &ContractTaskExecutionHubPeerSetIterator{contract: _ContractTaskExecutionHub.contract, event: "PeerSet", logs: logs, sub: sub}, nil
}

// WatchPeerSet is a free log subscription operation binding the contract event 0x238399d427b947898edb290f5ff0f9109849b1c3ba196a42e35f00c50a54b98b.
//
// Solidity: event PeerSet(uint32 eid, bytes32 peer)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubFilterer) WatchPeerSet(opts *bind.WatchOpts, sink chan<- *ContractTaskExecutionHubPeerSet) (event.Subscription, error) {

	logs, sub, err := _ContractTaskExecutionHub.contract.WatchLogs(opts, "PeerSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractTaskExecutionHubPeerSet)
				if err := _ContractTaskExecutionHub.contract.UnpackLog(event, "PeerSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePeerSet is a log parse operation binding the contract event 0x238399d427b947898edb290f5ff0f9109849b1c3ba196a42e35f00c50a54b98b.
//
// Solidity: event PeerSet(uint32 eid, bytes32 peer)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubFilterer) ParsePeerSet(log types.Log) (*ContractTaskExecutionHubPeerSet, error) {
	event := new(ContractTaskExecutionHubPeerSet)
	if err := _ContractTaskExecutionHub.contract.UnpackLog(event, "PeerSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractTaskExecutionHubUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the ContractTaskExecutionHub contract.
type ContractTaskExecutionHubUpgradedIterator struct {
	Event *ContractTaskExecutionHubUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractTaskExecutionHubUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractTaskExecutionHubUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractTaskExecutionHubUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractTaskExecutionHubUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractTaskExecutionHubUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractTaskExecutionHubUpgraded represents a Upgraded event raised by the ContractTaskExecutionHub contract.
type ContractTaskExecutionHubUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*ContractTaskExecutionHubUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _ContractTaskExecutionHub.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &ContractTaskExecutionHubUpgradedIterator{contract: _ContractTaskExecutionHub.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *ContractTaskExecutionHubUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _ContractTaskExecutionHub.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractTaskExecutionHubUpgraded)
				if err := _ContractTaskExecutionHub.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_ContractTaskExecutionHub *ContractTaskExecutionHubFilterer) ParseUpgraded(log types.Log) (*ContractTaskExecutionHubUpgraded, error) {
	event := new(ContractTaskExecutionHubUpgraded)
	if err := _ContractTaskExecutionHub.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
